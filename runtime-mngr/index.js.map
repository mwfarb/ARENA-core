{"version":3,"sources":["node_modules/uuid/dist/esm-browser/rng.js","node_modules/uuid/dist/esm-browser/bytesToUuid.js","node_modules/uuid/dist/esm-browser/v1.js","node_modules/uuid/dist/esm-browser/v35.js","node_modules/uuid/dist/esm-browser/md5.js","node_modules/uuid/dist/esm-browser/v3.js","node_modules/uuid/dist/esm-browser/v4.js","node_modules/uuid/dist/esm-browser/sha1.js","node_modules/uuid/dist/esm-browser/v5.js","node_modules/uuid/dist/esm-browser/index.js","node_modules/strict-uri-encode/index.js","node_modules/decode-uri-component/index.js","node_modules/split-on-first/index.js","node_modules/query-string/index.js","node_modules/paho-mqtt/paho-mqtt.js","mqtt-client.js","arts-msgs.js","worker-msgs.js","sa-cbuffer.js","signal.js","runtime-mngr.js","index.js"],"names":["getRandomValues","crypto","bind","msCrypto","rnds8","Uint8Array","rng","Error","bytesToUuid","byteToHex","i","toString","substr","buf","offset","bth","join","v1","_nodeId","_clockseq","_lastMSecs","_lastNSecs","options","b","node","clockseq","undefined","seedBytes","random","msecs","Date","getTime","nsecs","dt","tl","tmh","n","uuidToBytes","uuid","bytes","replace","hex","push","parseInt","stringToBytes","str","unescape","encodeURIComponent","Array","length","charCodeAt","DNS","URL","name","version","hashfunc","generateUUID","value","namespace","off","isArray","TypeError","concat","idx","err","md5","msg","md5ToHexEncodedArray","wordsToMd5","bytesToWords","input","x","output","length32","charAt","len","olda","oldb","oldc","oldd","a","c","d","md5ff","md5gg","md5hh","md5ii","safeAdd","length8","y","lsw","msw","bitRotateLeft","num","cnt","md5cmn","q","s","t","v3","v4","rnds","ii","sha1","f","z","ROTL","K","H","l","N","Math","ceil","M","j","pow","floor","W","e","T","v5","module","exports","toUpperCase","token","singleMatcher","RegExp","multiMatcher","decodeComponents","components","split","decodeURIComponent","left","slice","right","prototype","call","decode","tokens","match","customDecodeURIComponent","replaceMap","exec","result","entries","Object","keys","key","encodedURI","string","separator","separatorIndex","indexOf","strictUriEncode","require","decodeComponent","splitOnFirst","isNullOrUndefined","encoderForArrayFormat","arrayFormat","index","skipNull","skipEmptyString","encode","arrayFormatSeparator","parserForArrayFormat","accumulator","newValue","map","item","validateArrayFormatSeparator","strict","keysSorter","sort","Number","removeHash","hashStart","getHash","url","hash","extract","queryStart","parseValue","parseNumbers","isNaN","trim","parseBooleans","toLowerCase","parse","assign","formatter","ret","create","param","includes","k","reduce","Boolean","stringify","object","shouldFilter","objectCopy","filter","parseUrl","query","parseFragmentIdentifier","fragmentIdentifier","stringifyUrl","queryFromUrl","parsedQueryFromUrl","queryString","_this","MqttClient","constructor","st","settings","uri","host","port","path","clientid","round","subscribeTopics","onConnectCallback","onConnectCallbackContext","onMessageCallback","willMessage","Paho","Message","dbg","reconnect","useSSL","destinationName","willMessageTopic","console","log","connect","mqttc","Client","wss","onConnectionLost","onMessageArrived","Promise","resolve","reject","onSuccess","subscribe","onFailure","directMesssage","topic","payload","JSON","disconnect","reConnect","clientConnect","responseObject","errorCode","errorMessage","message","payloadString","publish","send","unsubscribe","Action","delete","ObjType","rt","mod","Type","req","resp","Result","ok","msg_action","data","type","max_nmodules","apis","mod_data","filename","navigator","product","parent","fileid","filetype","env","args","channels","wait_state","memory","object_id","action","msgType","start","stop","pub_msg","sub_msg","new_stream","signal","finish","DFT_BUFFER_SIZE","SharedArrayCircularBuffer","createSharedBuffer","byteSize","buffer","SharedArrayBuffer","Uint32Array","BYTES_PER_ELEMENT","uint32","spinlock","desc","byteLength","logOverwrite","pop","nbytes","Atomics","compareExchange","min","size","setOverwriteLog","SIGNO","QUIT","KILL","runtime","mc","ioworker","dft_realm","dft_reg_topic","dft_ctl_topic","dft_dbg_topic","dft_apis","dft_store_location","init","rrealm","realm","ruuid","reg_topic","ctl_topic","dbg_topic","arts_ctl_topic","reg_timeout_seconds","mqtt_uri","onInitCallback","modules","client_modules","filestore_location","isRegistered","lastWill","ARTSMessages","window","onbeforeunload","forEach","modDelMsg","onMqttMessage","error","registerRuntime","Worker","info","modUuid","signo","postMessage","WorkerMessages","mod_uuid","createModule","persist_mod","pdata","replaceVars","text","rvars","re","mqtthost","globals","mqttParamZ","lastIndexOf","substring","qstring","QueryString","location","search","scene","renderParam","mqtth","cameraid","camName","username","userParam","runtimeid","params","muuid","fn","instantiate","test","modCreateMsg","affinity","reg_msg","reg_uuid","setTimeout","startsWith","handleARTSMsg","stdin_topic","stdout_topic","sb","channel","MessageChannel","arts_mod_instance_data","worker_port","port2","shared_array_buffer","mworker","migratetx_start","now","port1","addEventListener","onWorkerMessage","send_to_runtime","del_start","terminate","time","timeEnd","runtimeInitDone","pendingModules","persistm","RuntimeMngr","WASMRuntimeManager","event","defaults","mqttParam","hostname"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != 'undefined' && typeof msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\nexport default function rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex; // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n\n  return [bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]]].join('');\n}\n\nexport default bytesToUuid;","import rng from './rng.js';\nimport bytesToUuid from './bytesToUuid.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\n\nvar _clockseq; // Previous uuid creation time\n\n\nvar _lastMSecs = 0;\nvar _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    var seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nexport default v1;","import bytesToUuid from './bytesToUuid.js';\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  var bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = new Array(str.length);\n\n  for (var i = 0; i < str.length; i++) {\n    bytes[i] = str.charCodeAt(i);\n  }\n\n  return bytes;\n}\n\nexport var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  var generateUUID = function generateUUID(value, namespace, buf, offset) {\n    var off = buf && offset || 0;\n    if (typeof value == 'string') value = stringToBytes(value);\n    if (typeof namespace == 'string') namespace = uuidToBytes(namespace);\n    if (!Array.isArray(value)) throw TypeError('value must be an array of bytes');\n    if (!Array.isArray(namespace) || namespace.length !== 16) throw TypeError('namespace must be uuid string or an Array of 16 byte values'); // Per 4.3\n\n    var bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (var idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || bytesToUuid(bytes);\n  }; // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name;\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes == 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Array(msg.length);\n\n    for (var i = 0; i < msg.length; i++) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  var i;\n  var x;\n  var output = [];\n  var length32 = input.length * 32;\n  var hexTab = '0123456789abcdef';\n  var hex;\n\n  for (i = 0; i < length32; i += 8) {\n    x = input[i >> 5] >>> i % 32 & 0xff;\n    hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[(len + 64 >>> 9 << 4) + 14] = len;\n  var i;\n  var olda;\n  var oldb;\n  var oldc;\n  var oldd;\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n\n  for (i = 0; i < x.length; i += 16) {\n    olda = a;\n    oldb = b;\n    oldc = c;\n    oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  var i;\n  var output = [];\n  output[(input.length >> 2) - 1] = undefined;\n\n  for (i = 0; i < output.length; i += 1) {\n    output[i] = 0;\n  }\n\n  var length8 = input.length * 8;\n\n  for (i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nexport default md5;","import v35 from './v35.js';\nimport md5 from './md5.js';\nvar v3 = v35('v3', 0x30, md5);\nexport default v3;","import rng from './rng.js';\nimport bytesToUuid from './bytesToUuid.js';\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof options == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nexport default v4;","// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes == 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Array(msg.length);\n\n    for (var i = 0; i < msg.length; i++) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  bytes.push(0x80);\n  var l = bytes.length / 4 + 2;\n  var N = Math.ceil(l / 16);\n  var M = new Array(N);\n\n  for (var i = 0; i < N; i++) {\n    M[i] = new Array(16);\n\n    for (var j = 0; j < 16; j++) {\n      M[i][j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (var i = 0; i < N; i++) {\n    var W = new Array(80);\n\n    for (var t = 0; t < 16; t++) {\n      W[t] = M[i][t];\n    }\n\n    for (var t = 16; t < 80; t++) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    var a = H[0];\n    var b = H[1];\n    var c = H[2];\n    var d = H[3];\n    var e = H[4];\n\n    for (var t = 0; t < 80; t++) {\n      var s = Math.floor(t / 20);\n      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nexport default sha1;","import v35 from './v35.js';\nimport sha1 from './sha1.js';\nvar v5 = v35('v5', 0x50, sha1);\nexport default v5;","export { default as v1 } from './v1.js';\nexport { default as v3 } from './v3.js';\nexport { default as v4 } from './v4.js';\nexport { default as v5 } from './v5.js';","'use strict';\nmodule.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n","'use strict';\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp(token, 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn decodeURIComponent(components.join(''));\n\t} catch (err) {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tvar left = components.slice(0, split);\n\tvar right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch (err) {\n\t\tvar tokens = input.match(singleMatcher);\n\n\t\tfor (var i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher);\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tvar replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD'\n\t};\n\n\tvar match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch (err) {\n\t\t\tvar result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tvar entries = Object.keys(replaceMap);\n\n\tfor (var i = 0; i < entries.length; i++) {\n\t\t// Replace all decoded components\n\t\tvar key = entries[i];\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nmodule.exports = function (encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\tencodedURI = encodedURI.replace(/\\+/g, ' ');\n\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch (err) {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n};\n","'use strict';\n\nmodule.exports = (string, separator) => {\n\tif (!(typeof string === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError('Expected the arguments to be of type `string`');\n\t}\n\n\tif (separator === '') {\n\t\treturn [string];\n\t}\n\n\tconst separatorIndex = string.indexOf(separator);\n\n\tif (separatorIndex === -1) {\n\t\treturn [string];\n\t}\n\n\treturn [\n\t\tstring.slice(0, separatorIndex),\n\t\tstring.slice(separatorIndex + separator.length)\n\t];\n};\n","'use strict';\nconst strictUriEncode = require('strict-uri-encode');\nconst decodeComponent = require('decode-uri-component');\nconst splitOnFirst = require('split-on-first');\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[', index, ']'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')\n\t\t\t\t];\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[]'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (value === null || value === undefined || value.length === 0) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, encode(key, options)];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.split('').indexOf(options.arrayFormatSeparator) > -1;\n\t\t\t\tconst newValue = isArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nfunction parseValue(value, options) {\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\tvalue = Number(value);\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\tvalue = value.toLowerCase() === 'true';\n\t}\n\n\treturn value;\n}\n\nfunction parse(input, options) {\n\toptions = Object.assign({\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst ret = Object.create(null);\n\n\tif (typeof input !== 'string') {\n\t\treturn ret;\n\t}\n\n\tinput = input.trim().replace(/^[?#&]/, '');\n\n\tif (!input) {\n\t\treturn ret;\n\t}\n\n\tfor (const param of input.split('&')) {\n\t\tlet [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, ' ') : param, '=');\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : ['comma', 'separator'].includes(options.arrayFormat) ? value : decode(value, options);\n\t\tformatter(decode(key, options), value, ret);\n\t}\n\n\tfor (const key of Object.keys(ret)) {\n\t\tconst value = ret[key];\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tfor (const k of Object.keys(value)) {\n\t\t\t\tvalue[k] = parseValue(value[k], options);\n\t\t\t}\n\t\t} else {\n\t\t\tret[key] = parseValue(value, options);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn ret;\n\t}\n\n\treturn (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = ret[key];\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(value);\n\t\t} else {\n\t\t\tresult[key] = value;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = (object, options) => {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ','\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key])) ||\n\t\t(options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const key of Object.keys(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = object[key];\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n};\n\nexports.parseUrl = (input, options) => {\n\toptions = Object.assign({\n\t\tdecode: true\n\t}, options);\n\n\tconst [url, hash] = splitOnFirst(input, '#');\n\n\treturn Object.assign(\n\t\t{\n\t\t\turl: url.split('?')[0] || '',\n\t\t\tquery: parse(extract(input), options)\n\t\t},\n\t\toptions && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}\n\t);\n};\n\nexports.stringifyUrl = (input, options) => {\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true\n\t}, options);\n\n\tconst url = removeHash(input.url).split('?')[0] || '';\n\tconst queryFromUrl = exports.extract(input.url);\n\tconst parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});\n\n\tconst query = Object.assign(parsedQueryFromUrl, input.query);\n\tlet queryString = exports.stringify(query, options);\n\tif (queryString) {\n\t\tqueryString = `?${queryString}`;\n\t}\n\n\tlet hash = getHash(input.url);\n\tif (input.fragmentIdentifier) {\n\t\thash = `#${encode(input.fragmentIdentifier, options)}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n};\n","/*******************************************************************************\n * Copyright (c) 2013 IBM Corp.\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution.\n *\n * The Eclipse Public License is available at\n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at\n *   http://www.eclipse.org/org/documents/edl-v10.php.\n *\n * Contributors:\n *    Andrew Banks - initial API and implementation and initial documentation\n *******************************************************************************/\n\n\n// Only expose a single object name in the global namespace.\n// Everything must go through this module. Global Paho module\n// only has a single public function, client, which returns\n// a Paho client object given connection details.\n\n/**\n * Send and receive messages using web browsers.\n * <p>\n * This programming interface lets a JavaScript client application use the MQTT V3.1 or\n * V3.1.1 protocol to connect to an MQTT-supporting messaging server.\n *\n * The function supported includes:\n * <ol>\n * <li>Connecting to and disconnecting from a server. The server is identified by its host name and port number.\n * <li>Specifying options that relate to the communications link with the server,\n * for example the frequency of keep-alive heartbeats, and whether SSL/TLS is required.\n * <li>Subscribing to and receiving messages from MQTT Topics.\n * <li>Publishing messages to MQTT Topics.\n * </ol>\n * <p>\n * The API consists of two main objects:\n * <dl>\n * <dt><b>{@link Paho.Client}</b></dt>\n * <dd>This contains methods that provide the functionality of the API,\n * including provision of callbacks that notify the application when a message\n * arrives from or is delivered to the messaging server,\n * or when the status of its connection to the messaging server changes.</dd>\n * <dt><b>{@link Paho.Message}</b></dt>\n * <dd>This encapsulates the payload of the message along with various attributes\n * associated with its delivery, in particular the destination to which it has\n * been (or is about to be) sent.</dd>\n * </dl>\n * <p>\n * The programming interface validates parameters passed to it, and will throw\n * an Error containing an error message intended for developer use, if it detects\n * an error with any parameter.\n * <p>\n * Example:\n *\n * <code><pre>\nvar client = new Paho.MQTT.Client(location.hostname, Number(location.port), \"clientId\");\nclient.onConnectionLost = onConnectionLost;\nclient.onMessageArrived = onMessageArrived;\nclient.connect({onSuccess:onConnect});\n\nfunction onConnect() {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onConnect\");\n  client.subscribe(\"/World\");\n  var message = new Paho.MQTT.Message(\"Hello\");\n  message.destinationName = \"/World\";\n  client.send(message);\n};\nfunction onConnectionLost(responseObject) {\n  if (responseObject.errorCode !== 0)\n\tconsole.log(\"onConnectionLost:\"+responseObject.errorMessage);\n};\nfunction onMessageArrived(message) {\n  console.log(\"onMessageArrived:\"+message.payloadString);\n  client.disconnect();\n};\n * </pre></code>\n * @namespace Paho\n */\n\n/* jshint shadow:true */\n(function ExportLibrary(root, factory) {\n\tif(typeof exports === \"object\" && typeof module === \"object\"){\n\t\tmodule.exports = factory();\n\t} else if (typeof define === \"function\" && define.amd){\n\t\tdefine(factory);\n\t} else if (typeof exports === \"object\"){\n\t\texports = factory();\n\t} else {\n\t\t//if (typeof root.Paho === \"undefined\"){\n\t\t//\troot.Paho = {};\n\t\t//}\n\t\troot.Paho = factory();\n\t}\n})(this, function LibraryFactory(){\n\n\n\tvar PahoMQTT = (function (global) {\n\n\t// Private variables below, these are only visible inside the function closure\n\t// which is used to define the module.\n\tvar version = \"@VERSION@-@BUILDLEVEL@\";\n\n\t/**\n\t * @private\n\t */\n\tvar localStorage = global.localStorage || (function () {\n\t\tvar data = {};\n\n\t\treturn {\n\t\t\tsetItem: function (key, item) { data[key] = item; },\n\t\t\tgetItem: function (key) { return data[key]; },\n\t\t\tremoveItem: function (key) { delete data[key]; },\n\t\t};\n\t})();\n\n\t\t/**\n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private\n\t */\n\t\tvar MESSAGE_TYPE = {\n\t\t\tCONNECT: 1,\n\t\t\tCONNACK: 2,\n\t\t\tPUBLISH: 3,\n\t\t\tPUBACK: 4,\n\t\t\tPUBREC: 5,\n\t\t\tPUBREL: 6,\n\t\t\tPUBCOMP: 7,\n\t\t\tSUBSCRIBE: 8,\n\t\t\tSUBACK: 9,\n\t\t\tUNSUBSCRIBE: 10,\n\t\t\tUNSUBACK: 11,\n\t\t\tPINGREQ: 12,\n\t\t\tPINGRESP: 13,\n\t\t\tDISCONNECT: 14\n\t\t};\n\n\t\t// Collection of utility methods used to simplify module code\n\t\t// and promote the DRY pattern.\n\n\t\t/**\n\t * Validate an object's parameter names to ensure they\n\t * match a list of expected variables name for this option\n\t * type. Used to ensure option object passed into the API don't\n\t * contain erroneous parameters.\n\t * @param {Object} obj - User options object\n\t * @param {Object} keys - valid keys and types that may exist in obj.\n\t * @throws {Error} Invalid option parameter found.\n\t * @private\n\t */\n\t\tvar validate = function(obj, keys) {\n\t\t\tfor (var key in obj) {\n\t\t\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t\t\tif (keys.hasOwnProperty(key)) {\n\t\t\t\t\t\tif (typeof obj[key] !== keys[key])\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof obj[key], key]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar errorStr = \"Unknown property, \" + key + \". Valid properties are:\";\n\t\t\t\t\t\tfor (var validKey in keys)\n\t\t\t\t\t\t\tif (keys.hasOwnProperty(validKey))\n\t\t\t\t\t\t\t\terrorStr = errorStr+\" \"+validKey;\n\t\t\t\t\t\tthrow new Error(errorStr);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Return a new function which runs the user function bound\n\t * to a fixed scope.\n\t * @param {function} User function\n\t * @param {object} Function scope\n\t * @return {function} User function bound to another scope\n\t * @private\n\t */\n\t\tvar scope = function (f, scope) {\n\t\t\treturn function () {\n\t\t\t\treturn f.apply(scope, arguments);\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private\n\t */\n\t\tvar ERROR = {\n\t\t\tOK: {code:0, text:\"AMQJSC0000I OK.\"},\n\t\t\tCONNECT_TIMEOUT: {code:1, text:\"AMQJSC0001E Connect timed out.\"},\n\t\t\tSUBSCRIBE_TIMEOUT: {code:2, text:\"AMQJS0002E Subscribe timed out.\"},\n\t\t\tUNSUBSCRIBE_TIMEOUT: {code:3, text:\"AMQJS0003E Unsubscribe timed out.\"},\n\t\t\tPING_TIMEOUT: {code:4, text:\"AMQJS0004E Ping timed out.\"},\n\t\t\tINTERNAL_ERROR: {code:5, text:\"AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}\"},\n\t\t\tCONNACK_RETURNCODE: {code:6, text:\"AMQJS0006E Bad Connack return code:{0} {1}.\"},\n\t\t\tSOCKET_ERROR: {code:7, text:\"AMQJS0007E Socket error:{0}.\"},\n\t\t\tSOCKET_CLOSE: {code:8, text:\"AMQJS0008I Socket closed.\"},\n\t\t\tMALFORMED_UTF: {code:9, text:\"AMQJS0009E Malformed UTF data:{0} {1} {2}.\"},\n\t\t\tUNSUPPORTED: {code:10, text:\"AMQJS0010E {0} is not supported by this browser.\"},\n\t\t\tINVALID_STATE: {code:11, text:\"AMQJS0011E Invalid state {0}.\"},\n\t\t\tINVALID_TYPE: {code:12, text:\"AMQJS0012E Invalid type {0} for {1}.\"},\n\t\t\tINVALID_ARGUMENT: {code:13, text:\"AMQJS0013E Invalid argument {0} for {1}.\"},\n\t\t\tUNSUPPORTED_OPERATION: {code:14, text:\"AMQJS0014E Unsupported operation.\"},\n\t\t\tINVALID_STORED_DATA: {code:15, text:\"AMQJS0015E Invalid data in local storage key={0} value={1}.\"},\n\t\t\tINVALID_MQTT_MESSAGE_TYPE: {code:16, text:\"AMQJS0016E Invalid MQTT message type {0}.\"},\n\t\t\tMALFORMED_UNICODE: {code:17, text:\"AMQJS0017E Malformed Unicode string:{0} {1}.\"},\n\t\t\tBUFFER_FULL: {code:18, text:\"AMQJS0018E Message buffer is full, maximum buffer size: {0}.\"},\n\t\t};\n\n\t\t/** CONNACK RC Meaning. */\n\t\tvar CONNACK_RC = {\n\t\t\t0:\"Connection Accepted\",\n\t\t\t1:\"Connection Refused: unacceptable protocol version\",\n\t\t\t2:\"Connection Refused: identifier rejected\",\n\t\t\t3:\"Connection Refused: server unavailable\",\n\t\t\t4:\"Connection Refused: bad user name or password\",\n\t\t\t5:\"Connection Refused: not authorized\"\n\t\t};\n\n\t/**\n\t * Format an error message text.\n\t * @private\n\t * @param {error} ERROR value above.\n\t * @param {substitutions} [array] substituted into the text.\n\t * @return the text with the substitutions made.\n\t */\n\t\tvar format = function(error, substitutions) {\n\t\t\tvar text = error.text;\n\t\t\tif (substitutions) {\n\t\t\t\tvar field,start;\n\t\t\t\tfor (var i=0; i<substitutions.length; i++) {\n\t\t\t\t\tfield = \"{\"+i+\"}\";\n\t\t\t\t\tstart = text.indexOf(field);\n\t\t\t\t\tif(start > 0) {\n\t\t\t\t\t\tvar part1 = text.substring(0,start);\n\t\t\t\t\t\tvar part2 = text.substring(start+field.length);\n\t\t\t\t\t\ttext = part1+substitutions[i]+part2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\t//MQTT protocol and version          6    M    Q    I    s    d    p    3\n\t\tvar MqttProtoIdentifierv3 = [0x00,0x06,0x4d,0x51,0x49,0x73,0x64,0x70,0x03];\n\t\t//MQTT proto/version for 311         4    M    Q    T    T    4\n\t\tvar MqttProtoIdentifierv4 = [0x00,0x04,0x4d,0x51,0x54,0x54,0x04];\n\n\t\t/**\n\t * Construct an MQTT wire protocol message.\n\t * @param type MQTT packet type.\n\t * @param options optional wire message attributes.\n\t *\n\t * Optional properties\n\t *\n\t * messageIdentifier: message ID in the range [0..65535]\n\t * payloadMessage:\tApplication Message - PUBLISH only\n\t * connectStrings:\tarray of 0 or more Strings to be put into the CONNECT payload\n\t * topics:\t\t\tarray of strings (SUBSCRIBE, UNSUBSCRIBE)\n\t * requestQoS:\t\tarray of QoS values [0..2]\n\t *\n\t * \"Flag\" properties\n\t * cleanSession:\ttrue if present / false if absent (CONNECT)\n\t * willMessage:  \ttrue if present / false if absent (CONNECT)\n\t * isRetained:\t\ttrue if present / false if absent (CONNECT)\n\t * userName:\t\ttrue if present / false if absent (CONNECT)\n\t * password:\t\ttrue if present / false if absent (CONNECT)\n\t * keepAliveInterval:\tinteger [0..65535]  (CONNECT)\n\t *\n\t * @private\n\t * @ignore\n\t */\n\t\tvar WireMessage = function (type, options) {\n\t\t\tthis.type = type;\n\t\t\tfor (var name in options) {\n\t\t\t\tif (options.hasOwnProperty(name)) {\n\t\t\t\t\tthis[name] = options[name];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tWireMessage.prototype.encode = function() {\n\t\t// Compute the first byte of the fixed header\n\t\t\tvar first = ((this.type & 0x0f) << 4);\n\n\t\t\t/*\n\t\t * Now calculate the length of the variable header + payload by adding up the lengths\n\t\t * of all the component parts\n\t\t */\n\n\t\t\tvar remLength = 0;\n\t\t\tvar topicStrLength = [];\n\t\t\tvar destinationNameLength = 0;\n\t\t\tvar willMessagePayloadBytes;\n\n\t\t\t// if the message contains a messageIdentifier then we need two bytes for that\n\t\t\tif (this.messageIdentifier !== undefined)\n\t\t\t\tremLength += 2;\n\n\t\t\tswitch(this.type) {\n\t\t\t// If this a Connect then we need to include 12 bytes for its header\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tswitch(this.mqttVersion) {\n\t\t\t\tcase 3:\n\t\t\t\t\tremLength += MqttProtoIdentifierv3.length + 3;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tremLength += MqttProtoIdentifierv4.length + 3;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tremLength += UTF8Length(this.clientId) + 2;\n\t\t\t\tif (this.willMessage !== undefined) {\n\t\t\t\t\tremLength += UTF8Length(this.willMessage.destinationName) + 2;\n\t\t\t\t\t// Will message is always a string, sent as UTF-8 characters with a preceding length.\n\t\t\t\t\twillMessagePayloadBytes = this.willMessage.payloadBytes;\n\t\t\t\t\tif (!(willMessagePayloadBytes instanceof Uint8Array))\n\t\t\t\t\t\twillMessagePayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\t\tremLength += willMessagePayloadBytes.byteLength +2;\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tremLength += UTF8Length(this.userName) + 2;\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tremLength += UTF8Length(this.password) + 2;\n\t\t\t\tbreak;\n\n\t\t\t// Subscribe, Unsubscribe can both contain topic strings\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tremLength += this.requestedQos.length; // 1 byte for each topic's Qos\n\t\t\t\t// QoS on Subscribe only\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tif (this.payloadMessage.duplicate) first |= 0x08;\n\t\t\t\tfirst  = first |= (this.payloadMessage.qos << 1);\n\t\t\t\tif (this.payloadMessage.retained) first |= 0x01;\n\t\t\t\tdestinationNameLength = UTF8Length(this.payloadMessage.destinationName);\n\t\t\t\tremLength += destinationNameLength + 2;\n\t\t\t\tvar payloadBytes = this.payloadMessage.payloadBytes;\n\t\t\t\tremLength += payloadBytes.byteLength;\n\t\t\t\tif (payloadBytes instanceof ArrayBuffer)\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\telse if (!(payloadBytes instanceof Uint8Array))\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes.buffer);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Now we can allocate a buffer for the message\n\n\t\t\tvar mbi = encodeMBI(remLength);  // Convert the length to MQTT MBI format\n\t\t\tvar pos = mbi.length + 1;        // Offset of start of variable header\n\t\t\tvar buffer = new ArrayBuffer(remLength + pos);\n\t\t\tvar byteStream = new Uint8Array(buffer);    // view it as a sequence of bytes\n\n\t\t\t//Write the fixed header into the buffer\n\t\t\tbyteStream[0] = first;\n\t\t\tbyteStream.set(mbi,1);\n\n\t\t\t// If this is a PUBLISH then the variable header starts with a topic\n\t\t\tif (this.type == MESSAGE_TYPE.PUBLISH)\n\t\t\t\tpos = writeString(this.payloadMessage.destinationName, destinationNameLength, byteStream, pos);\n\t\t\t// If this is a CONNECT then the variable header contains the protocol name/version, flags and keepalive time\n\n\t\t\telse if (this.type == MESSAGE_TYPE.CONNECT) {\n\t\t\t\tswitch (this.mqttVersion) {\n\t\t\t\tcase 3:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv3, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv3.length;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv4, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv4.length;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvar connectFlags = 0;\n\t\t\t\tif (this.cleanSession)\n\t\t\t\t\tconnectFlags = 0x02;\n\t\t\t\tif (this.willMessage !== undefined ) {\n\t\t\t\t\tconnectFlags |= 0x04;\n\t\t\t\t\tconnectFlags |= (this.willMessage.qos<<3);\n\t\t\t\t\tif (this.willMessage.retained) {\n\t\t\t\t\t\tconnectFlags |= 0x20;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tconnectFlags |= 0x80;\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tconnectFlags |= 0x40;\n\t\t\t\tbyteStream[pos++] = connectFlags;\n\t\t\t\tpos = writeUint16 (this.keepAliveInterval, byteStream, pos);\n\t\t\t}\n\n\t\t\t// Output the messageIdentifier - if there is one\n\t\t\tif (this.messageIdentifier !== undefined)\n\t\t\t\tpos = writeUint16 (this.messageIdentifier, byteStream, pos);\n\n\t\t\tswitch(this.type) {\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tpos = writeString(this.clientId, UTF8Length(this.clientId), byteStream, pos);\n\t\t\t\tif (this.willMessage !== undefined) {\n\t\t\t\t\tpos = writeString(this.willMessage.destinationName, UTF8Length(this.willMessage.destinationName), byteStream, pos);\n\t\t\t\t\tpos = writeUint16(willMessagePayloadBytes.byteLength, byteStream, pos);\n\t\t\t\t\tbyteStream.set(willMessagePayloadBytes, pos);\n\t\t\t\t\tpos += willMessagePayloadBytes.byteLength;\n\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tpos = writeString(this.userName, UTF8Length(this.userName), byteStream, pos);\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tpos = writeString(this.password, UTF8Length(this.password), byteStream, pos);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t// PUBLISH has a text or binary payload, if text do not add a 2 byte length field, just the UTF characters.\n\t\t\t\tbyteStream.set(payloadBytes, pos);\n\n\t\t\t\tbreak;\n\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBREC:\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBREL:\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBCOMP:\n\t\t\t\t//    \t    \tbreak;\n\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\n\t\t\t\t// SUBSCRIBE has a list of topic strings and request QoS\n\t\t\t\tfor (var i=0; i<this.topics.length; i++) {\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\t\tbyteStream[pos++] = this.requestedQos[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\n\t\t\t\t// UNSUBSCRIBE has a list of topic strings\n\t\t\t\tfor (var i=0; i<this.topics.length; i++)\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// Do nothing.\n\t\t\t}\n\n\t\t\treturn buffer;\n\t\t};\n\n\t\tfunction decodeMessage(input,pos) {\n\t\t\tvar startingPos = pos;\n\t\t\tvar first = input[pos];\n\t\t\tvar type = first >> 4;\n\t\t\tvar messageInfo = first &= 0x0f;\n\t\t\tpos += 1;\n\n\n\t\t\t// Decode the remaining length (MBI format)\n\n\t\t\tvar digit;\n\t\t\tvar remLength = 0;\n\t\t\tvar multiplier = 1;\n\t\t\tdo {\n\t\t\t\tif (pos == input.length) {\n\t\t\t\t\treturn [null,startingPos];\n\t\t\t\t}\n\t\t\t\tdigit = input[pos++];\n\t\t\t\tremLength += ((digit & 0x7F) * multiplier);\n\t\t\t\tmultiplier *= 128;\n\t\t\t} while ((digit & 0x80) !== 0);\n\n\t\t\tvar endPos = pos+remLength;\n\t\t\tif (endPos > input.length) {\n\t\t\t\treturn [null,startingPos];\n\t\t\t}\n\n\t\t\tvar wireMessage = new WireMessage(type);\n\t\t\tswitch(type) {\n\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\tvar connectAcknowledgeFlags = input[pos++];\n\t\t\t\tif (connectAcknowledgeFlags & 0x01)\n\t\t\t\t\twireMessage.sessionPresent = true;\n\t\t\t\twireMessage.returnCode = input[pos++];\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tvar qos = (messageInfo >> 1) & 0x03;\n\n\t\t\t\tvar len = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\tvar topicName = parseUTF8(input, pos, len);\n\t\t\t\tpos += len;\n\t\t\t\t// If QoS 1 or 2 there will be a messageIdentifier\n\t\t\t\tif (qos > 0) {\n\t\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\t\tpos += 2;\n\t\t\t\t}\n\n\t\t\t\tvar message = new Message(input.subarray(pos, endPos));\n\t\t\t\tif ((messageInfo & 0x01) == 0x01)\n\t\t\t\t\tmessage.retained = true;\n\t\t\t\tif ((messageInfo & 0x08) == 0x08)\n\t\t\t\t\tmessage.duplicate =  true;\n\t\t\t\tmessage.qos = qos;\n\t\t\t\tmessage.destinationName = topicName;\n\t\t\t\twireMessage.payloadMessage = message;\n\t\t\t\tbreak;\n\n\t\t\tcase  MESSAGE_TYPE.PUBACK:\n\t\t\tcase  MESSAGE_TYPE.PUBREC:\n\t\t\tcase  MESSAGE_TYPE.PUBREL:\n\t\t\tcase  MESSAGE_TYPE.PUBCOMP:\n\t\t\tcase  MESSAGE_TYPE.UNSUBACK:\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tbreak;\n\n\t\t\tcase  MESSAGE_TYPE.SUBACK:\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\twireMessage.returnCode = input.subarray(pos, endPos);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn [wireMessage,endPos];\n\t\t}\n\n\t\tfunction writeUint16(input, buffer, offset) {\n\t\t\tbuffer[offset++] = input >> 8;      //MSB\n\t\t\tbuffer[offset++] = input % 256;     //LSB\n\t\t\treturn offset;\n\t\t}\n\n\t\tfunction writeString(input, utf8Length, buffer, offset) {\n\t\t\toffset = writeUint16(utf8Length, buffer, offset);\n\t\t\tstringToUTF8(input, buffer, offset);\n\t\t\treturn offset + utf8Length;\n\t\t}\n\n\t\tfunction readUint16(buffer, offset) {\n\t\t\treturn 256*buffer[offset] + buffer[offset+1];\n\t\t}\n\n\t\t/**\n\t * Encodes an MQTT Multi-Byte Integer\n\t * @private\n\t */\n\t\tfunction encodeMBI(number) {\n\t\t\tvar output = new Array(1);\n\t\t\tvar numBytes = 0;\n\n\t\t\tdo {\n\t\t\t\tvar digit = number % 128;\n\t\t\t\tnumber = number >> 7;\n\t\t\t\tif (number > 0) {\n\t\t\t\t\tdigit |= 0x80;\n\t\t\t\t}\n\t\t\t\toutput[numBytes++] = digit;\n\t\t\t} while ( (number > 0) && (numBytes<4) );\n\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Takes a String and calculates its length in bytes when encoded in UTF8.\n\t * @private\n\t */\n\t\tfunction UTF8Length(input) {\n\t\t\tvar output = 0;\n\t\t\tfor (var i = 0; i<input.length; i++)\n\t\t\t{\n\t\t\t\tvar charCode = input.charCodeAt(i);\n\t\t\t\tif (charCode > 0x7FF)\n\t\t\t\t{\n\t\t\t\t\t// Surrogate pair means its a 4 byte character\n\t\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF)\n\t\t\t\t\t{\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\toutput++;\n\t\t\t\t\t}\n\t\t\t\t\toutput +=3;\n\t\t\t\t}\n\t\t\t\telse if (charCode > 0x7F)\n\t\t\t\t\toutput +=2;\n\t\t\t\telse\n\t\t\t\t\toutput++;\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Takes a String and writes it into an array as UTF8 encoded bytes.\n\t * @private\n\t */\n\t\tfunction stringToUTF8(input, output, start) {\n\t\t\tvar pos = start;\n\t\t\tfor (var i = 0; i<input.length; i++) {\n\t\t\t\tvar charCode = input.charCodeAt(i);\n\n\t\t\t\t// Check for a surrogate pair.\n\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF) {\n\t\t\t\t\tvar lowCharCode = input.charCodeAt(++i);\n\t\t\t\t\tif (isNaN(lowCharCode)) {\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UNICODE, [charCode, lowCharCode]));\n\t\t\t\t\t}\n\t\t\t\t\tcharCode = ((charCode - 0xD800)<<10) + (lowCharCode - 0xDC00) + 0x10000;\n\n\t\t\t\t}\n\n\t\t\t\tif (charCode <= 0x7F) {\n\t\t\t\t\toutput[pos++] = charCode;\n\t\t\t\t} else if (charCode <= 0x7FF) {\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x1F | 0xC0;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t} else if (charCode <= 0xFFFF) {\n\t\t\t\t\toutput[pos++] = charCode>>12 & 0x0F | 0xE0;\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t} else {\n\t\t\t\t\toutput[pos++] = charCode>>18 & 0x07 | 0xF0;\n\t\t\t\t\toutput[pos++] = charCode>>12 & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\tfunction parseUTF8(input, offset, length) {\n\t\t\tvar output = \"\";\n\t\t\tvar utf16;\n\t\t\tvar pos = offset;\n\n\t\t\twhile (pos < offset+length)\n\t\t\t{\n\t\t\t\tvar byte1 = input[pos++];\n\t\t\t\tif (byte1 < 128)\n\t\t\t\t\tutf16 = byte1;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar byte2 = input[pos++]-128;\n\t\t\t\t\tif (byte2 < 0)\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16),\"\"]));\n\t\t\t\t\tif (byte1 < 0xE0)             // 2 byte character\n\t\t\t\t\t\tutf16 = 64*(byte1-0xC0) + byte2;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar byte3 = input[pos++]-128;\n\t\t\t\t\t\tif (byte3 < 0)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16)]));\n\t\t\t\t\t\tif (byte1 < 0xF0)        // 3 byte character\n\t\t\t\t\t\t\tutf16 = 4096*(byte1-0xE0) + 64*byte2 + byte3;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar byte4 = input[pos++]-128;\n\t\t\t\t\t\t\tif (byte4 < 0)\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t\tif (byte1 < 0xF8)        // 4 byte character\n\t\t\t\t\t\t\t\tutf16 = 262144*(byte1-0xF0) + 4096*byte2 + 64*byte3 + byte4;\n\t\t\t\t\t\t\telse                     // longer encodings are not supported\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (utf16 > 0xFFFF)   // 4 byte character - express as a surrogate pair\n\t\t\t\t{\n\t\t\t\t\tutf16 -= 0x10000;\n\t\t\t\t\toutput += String.fromCharCode(0xD800 + (utf16 >> 10)); // lead character\n\t\t\t\t\tutf16 = 0xDC00 + (utf16 & 0x3FF);  // trail character\n\t\t\t\t}\n\t\t\t\toutput += String.fromCharCode(utf16);\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Repeat keepalive requests, monitor responses.\n\t * @ignore\n\t */\n\t\tvar Pinger = function(client, keepAliveInterval) {\n\t\t\tthis._client = client;\n\t\t\tthis._keepAliveInterval = keepAliveInterval*1000;\n\t\t\tthis.isReset = false;\n\n\t\t\tvar pingReq = new WireMessage(MESSAGE_TYPE.PINGREQ).encode();\n\n\t\t\tvar doTimeout = function (pinger) {\n\t\t\t\treturn function () {\n\t\t\t\t\treturn doPing.apply(pinger);\n\t\t\t\t};\n\t\t\t};\n\n\t\t\t/** @ignore */\n\t\t\tvar doPing = function() {\n\t\t\t\tif (!this.isReset) {\n\t\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"Timed out\");\n\t\t\t\t\tthis._client._disconnected( ERROR.PING_TIMEOUT.code , format(ERROR.PING_TIMEOUT));\n\t\t\t\t} else {\n\t\t\t\t\tthis.isReset = false;\n\t\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"send PINGREQ\");\n\t\t\t\t\tthis._client.socket.send(pingReq);\n\t\t\t\t\tthis.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.reset = function() {\n\t\t\t\tthis.isReset = true;\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\tif (this._keepAliveInterval > 0)\n\t\t\t\t\tthis.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t\t};\n\n\t\t\tthis.cancel = function() {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * Monitor request completion.\n\t * @ignore\n\t */\n\t\tvar Timeout = function(client, timeoutSeconds, action, args) {\n\t\t\tif (!timeoutSeconds)\n\t\t\t\ttimeoutSeconds = 30;\n\n\t\t\tvar doTimeout = function (action, client, args) {\n\t\t\t\treturn function () {\n\t\t\t\t\treturn action.apply(client, args);\n\t\t\t\t};\n\t\t\t};\n\t\t\tthis.timeout = setTimeout(doTimeout(action, client, args), timeoutSeconds * 1000);\n\n\t\t\tthis.cancel = function() {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t};\n\t\t};\n\n\t/**\n\t * Internal implementation of the Websockets MQTT V3.1 client.\n\t *\n\t * @name Paho.ClientImpl @constructor\n\t * @param {String} host the DNS nameof the webSocket host.\n\t * @param {Number} port the port number for that host.\n\t * @param {String} clientId the MQ client identifier.\n\t */\n\t\tvar ClientImpl = function (uri, host, port, path, clientId) {\n\t\t// Check dependencies are satisfied in this browser.\n\t\t\tif (!(\"WebSocket\" in global && global.WebSocket !== null)) {\n\t\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"WebSocket\"]));\n\t\t\t}\n\t\t\tif (!(\"ArrayBuffer\" in global && global.ArrayBuffer !== null)) {\n\t\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"ArrayBuffer\"]));\n\t\t\t}\n\t\t\tthis._trace(\"Paho.Client\", uri, host, port, path, clientId);\n\n\t\t\tthis.host = host;\n\t\t\tthis.port = port;\n\t\t\tthis.path = path;\n\t\t\tthis.uri = uri;\n\t\t\tthis.clientId = clientId;\n\t\t\tthis._wsuri = null;\n\n\t\t\t// Local storagekeys are qualified with the following string.\n\t\t\t// The conditional inclusion of path in the key is for backward\n\t\t\t// compatibility to when the path was not configurable and assumed to\n\t\t\t// be /mqtt\n\t\t\tthis._localKey=host+\":\"+port+(path!=\"/mqtt\"?\":\"+path:\"\")+\":\"+clientId+\":\";\n\n\t\t\t// Create private instance-only message queue\n\t\t\t// Internal queue of messages to be sent, in sending order.\n\t\t\tthis._msg_queue = [];\n\t\t\tthis._buffered_msg_queue = [];\n\n\t\t\t// Messages we have sent and are expecting a response for, indexed by their respective message ids.\n\t\t\tthis._sentMessages = {};\n\n\t\t\t// Messages we have received and acknowleged and are expecting a confirm message for\n\t\t\t// indexed by their respective message ids.\n\t\t\tthis._receivedMessages = {};\n\n\t\t\t// Internal list of callbacks to be executed when messages\n\t\t\t// have been successfully sent over web socket, e.g. disconnect\n\t\t\t// when it doesn't have to wait for ACK, just message is dispatched.\n\t\t\tthis._notify_msg_sent = {};\n\n\t\t\t// Unique identifier for SEND messages, incrementing\n\t\t\t// counter as messages are sent.\n\t\t\tthis._message_identifier = 1;\n\n\t\t\t// Used to determine the transmission sequence of stored sent messages.\n\t\t\tthis._sequence = 0;\n\n\n\t\t\t// Load the local state, if any, from the saved version, only restore state relevant to this client.\n\t\t\tfor (var key in localStorage)\n\t\t\t\tif (   key.indexOf(\"Sent:\"+this._localKey) === 0 || key.indexOf(\"Received:\"+this._localKey) === 0)\n\t\t\t\t\tthis.restore(key);\n\t\t};\n\n\t\t// Messaging Client public instance members.\n\t\tClientImpl.prototype.host = null;\n\t\tClientImpl.prototype.port = null;\n\t\tClientImpl.prototype.path = null;\n\t\tClientImpl.prototype.uri = null;\n\t\tClientImpl.prototype.clientId = null;\n\n\t\t// Messaging Client private instance members.\n\t\tClientImpl.prototype.socket = null;\n\t\t/* true once we have received an acknowledgement to a CONNECT packet. */\n\t\tClientImpl.prototype.connected = false;\n\t\t/* The largest message identifier allowed, may not be larger than 2**16 but\n\t\t * if set smaller reduces the maximum number of outbound messages allowed.\n\t\t */\n\t\tClientImpl.prototype.maxMessageIdentifier = 65536;\n\t\tClientImpl.prototype.connectOptions = null;\n\t\tClientImpl.prototype.hostIndex = null;\n\t\tClientImpl.prototype.onConnected = null;\n\t\tClientImpl.prototype.onConnectionLost = null;\n\t\tClientImpl.prototype.onMessageDelivered = null;\n\t\tClientImpl.prototype.onMessageArrived = null;\n\t\tClientImpl.prototype.traceFunction = null;\n\t\tClientImpl.prototype._msg_queue = null;\n\t\tClientImpl.prototype._buffered_msg_queue = null;\n\t\tClientImpl.prototype._connectTimeout = null;\n\t\t/* The sendPinger monitors how long we allow before we send data to prove to the server that we are alive. */\n\t\tClientImpl.prototype.sendPinger = null;\n\t\t/* The receivePinger monitors how long we allow before we require evidence that the server is alive. */\n\t\tClientImpl.prototype.receivePinger = null;\n\t\tClientImpl.prototype._reconnectInterval = 1; // Reconnect Delay, starts at 1 second\n\t\tClientImpl.prototype._reconnecting = false;\n\t\tClientImpl.prototype._reconnectTimeout = null;\n\t\tClientImpl.prototype.disconnectedPublishing = false;\n\t\tClientImpl.prototype.disconnectedBufferSize = 5000;\n\n\t\tClientImpl.prototype.receiveBuffer = null;\n\n\t\tClientImpl.prototype._traceBuffer = null;\n\t\tClientImpl.prototype._MAX_TRACE_ENTRIES = 100;\n\n\t\tClientImpl.prototype.connect = function (connectOptions) {\n\t\t\tvar connectOptionsMasked = this._traceMask(connectOptions, \"password\");\n\t\t\tthis._trace(\"Client.connect\", connectOptionsMasked, this.socket, this.connected);\n\n\t\t\tif (this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\t\t\tif (this.socket)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\n\t\t\tif (this._reconnecting) {\n\t\t\t// connect() function is called while reconnect is in progress.\n\t\t\t// Terminate the auto reconnect process to use new connect options.\n\t\t\t\tthis._reconnectTimeout.cancel();\n\t\t\t\tthis._reconnectTimeout = null;\n\t\t\t\tthis._reconnecting = false;\n\t\t\t}\n\n\t\t\tthis.connectOptions = connectOptions;\n\t\t\tthis._reconnectInterval = 1;\n\t\t\tthis._reconnecting = false;\n\t\t\tif (connectOptions.uris) {\n\t\t\t\tthis.hostIndex = 0;\n\t\t\t\tthis._doConnect(connectOptions.uris[0]);\n\t\t\t} else {\n\t\t\t\tthis._doConnect(this.uri);\n\t\t\t}\n\n\t\t};\n\n\t\tClientImpl.prototype.subscribe = function (filter, subscribeOptions) {\n\t\t\tthis._trace(\"Client.subscribe\", filter, subscribeOptions);\n\n\t\t\tif (!this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\n            var wireMessage = new WireMessage(MESSAGE_TYPE.SUBSCRIBE);\n            wireMessage.topics = filter.constructor === Array ? filter : [filter];\n            if (subscribeOptions.qos === undefined)\n                subscribeOptions.qos = 0;\n            wireMessage.requestedQos = [];\n            for (var i = 0; i < wireMessage.topics.length; i++)\n                wireMessage.requestedQos[i] = subscribeOptions.qos;\n\n\t\t\tif (subscribeOptions.onSuccess) {\n\t\t\t\twireMessage.onSuccess = function(grantedQos) {subscribeOptions.onSuccess({invocationContext:subscribeOptions.invocationContext,grantedQos:grantedQos});};\n\t\t\t}\n\n\t\t\tif (subscribeOptions.onFailure) {\n\t\t\t\twireMessage.onFailure = function(errorCode) {subscribeOptions.onFailure({invocationContext:subscribeOptions.invocationContext,errorCode:errorCode, errorMessage:format(errorCode)});};\n\t\t\t}\n\n\t\t\tif (subscribeOptions.timeout) {\n\t\t\t\twireMessage.timeOut = new Timeout(this, subscribeOptions.timeout, subscribeOptions.onFailure,\n\t\t\t\t\t[{invocationContext:subscribeOptions.invocationContext,\n\t\t\t\t\t\terrorCode:ERROR.SUBSCRIBE_TIMEOUT.code,\n\t\t\t\t\t\terrorMessage:format(ERROR.SUBSCRIBE_TIMEOUT)}]);\n\t\t\t}\n\n\t\t\t// All subscriptions return a SUBACK.\n\t\t\tthis._requires_ack(wireMessage);\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype.unsubscribe = function(filter, unsubscribeOptions) {\n\t\t\tthis._trace(\"Client.unsubscribe\", filter, unsubscribeOptions);\n\n\t\t\tif (!this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\n            var wireMessage = new WireMessage(MESSAGE_TYPE.UNSUBSCRIBE);\n            wireMessage.topics = filter.constructor === Array ? filter : [filter];\n\n\t\t\tif (unsubscribeOptions.onSuccess) {\n\t\t\t\twireMessage.callback = function() {unsubscribeOptions.onSuccess({invocationContext:unsubscribeOptions.invocationContext});};\n\t\t\t}\n\t\t\tif (unsubscribeOptions.timeout) {\n\t\t\t\twireMessage.timeOut = new Timeout(this, unsubscribeOptions.timeout, unsubscribeOptions.onFailure,\n\t\t\t\t\t[{invocationContext:unsubscribeOptions.invocationContext,\n\t\t\t\t\t\terrorCode:ERROR.UNSUBSCRIBE_TIMEOUT.code,\n\t\t\t\t\t\terrorMessage:format(ERROR.UNSUBSCRIBE_TIMEOUT)}]);\n\t\t\t}\n\n\t\t\t// All unsubscribes return a SUBACK.\n\t\t\tthis._requires_ack(wireMessage);\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\tClientImpl.prototype.send = function (message) {\n\t\t\tthis._trace(\"Client.send\", message);\n\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.PUBLISH);\n\t\t\twireMessage.payloadMessage = message;\n\n\t\t\tif (this.connected) {\n\t\t\t// Mark qos 1 & 2 message as \"ACK required\"\n\t\t\t// For qos 0 message, invoke onMessageDelivered callback if there is one.\n\t\t\t// Then schedule the message.\n\t\t\t\tif (message.qos > 0) {\n\t\t\t\t\tthis._requires_ack(wireMessage);\n\t\t\t\t} else if (this.onMessageDelivered) {\n\t\t\t\t\tthis._notify_msg_sent[wireMessage] = this.onMessageDelivered(wireMessage.payloadMessage);\n\t\t\t\t}\n\t\t\t\tthis._schedule_message(wireMessage);\n\t\t\t} else {\n\t\t\t// Currently disconnected, will not schedule this message\n\t\t\t// Check if reconnecting is in progress and disconnected publish is enabled.\n\t\t\t\tif (this._reconnecting && this.disconnectedPublishing) {\n\t\t\t\t// Check the limit which include the \"required ACK\" messages\n\t\t\t\t\tvar messageCount = Object.keys(this._sentMessages).length + this._buffered_msg_queue.length;\n\t\t\t\t\tif (messageCount > this.disconnectedBufferSize) {\n\t\t\t\t\t\tthrow new Error(format(ERROR.BUFFER_FULL, [this.disconnectedBufferSize]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (message.qos > 0) {\n\t\t\t\t\t\t// Mark this message as \"ACK required\"\n\t\t\t\t\t\t\tthis._requires_ack(wireMessage);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twireMessage.sequence = ++this._sequence;\n\t\t\t\t\t\t\t// Add messages in fifo order to array, by adding to start\n\t\t\t\t\t\t\tthis._buffered_msg_queue.unshift(wireMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.disconnect = function () {\n\t\t\tthis._trace(\"Client.disconnect\");\n\n\t\t\tif (this._reconnecting) {\n\t\t\t// disconnect() function is called while reconnect is in progress.\n\t\t\t// Terminate the auto reconnect process.\n\t\t\t\tthis._reconnectTimeout.cancel();\n\t\t\t\tthis._reconnectTimeout = null;\n\t\t\t\tthis._reconnecting = false;\n\t\t\t}\n\n\t\t\tif (!this.socket)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connecting or connected\"]));\n\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.DISCONNECT);\n\n\t\t\t// Run the disconnected call back as soon as the message has been sent,\n\t\t\t// in case of a failure later on in the disconnect processing.\n\t\t\t// as a consequence, the _disconected call back may be run several times.\n\t\t\tthis._notify_msg_sent[wireMessage] = scope(this._disconnected, this);\n\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\tClientImpl.prototype.getTraceLog = function () {\n\t\t\tif ( this._traceBuffer !== null ) {\n\t\t\t\tthis._trace(\"Client.getTraceLog\", new Date());\n\t\t\t\tthis._trace(\"Client.getTraceLog in flight messages\", this._sentMessages.length);\n\t\t\t\tfor (var key in this._sentMessages)\n\t\t\t\t\tthis._trace(\"_sentMessages \",key, this._sentMessages[key]);\n\t\t\t\tfor (var key in this._receivedMessages)\n\t\t\t\t\tthis._trace(\"_receivedMessages \",key, this._receivedMessages[key]);\n\n\t\t\t\treturn this._traceBuffer;\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.startTrace = function () {\n\t\t\tif ( this._traceBuffer === null ) {\n\t\t\t\tthis._traceBuffer = [];\n\t\t\t}\n\t\t\tthis._trace(\"Client.startTrace\", new Date(), version);\n\t\t};\n\n\t\tClientImpl.prototype.stopTrace = function () {\n\t\t\tdelete this._traceBuffer;\n\t\t};\n\n\t\tClientImpl.prototype._doConnect = function (wsurl) {\n\t\t// When the socket is open, this client will send the CONNECT WireMessage using the saved parameters.\n\t\t\tif (this.connectOptions.useSSL) {\n\t\t\t\tvar uriParts = wsurl.split(\":\");\n\t\t\t\turiParts[0] = \"wss\";\n\t\t\t\twsurl = uriParts.join(\":\");\n\t\t\t}\n\t\t\tthis._wsuri = wsurl;\n\t\t\tthis.connected = false;\n\n\n\n\t\t\tif (this.connectOptions.mqttVersion < 4) {\n\t\t\t\tthis.socket = new WebSocket(wsurl, [\"mqttv3.1\"]);\n\t\t\t} else {\n\t\t\t\tthis.socket = new WebSocket(wsurl, [\"mqtt\"]);\n\t\t\t}\n\t\t\tthis.socket.binaryType = \"arraybuffer\";\n\t\t\tthis.socket.onopen = scope(this._on_socket_open, this);\n\t\t\tthis.socket.onmessage = scope(this._on_socket_message, this);\n\t\t\tthis.socket.onerror = scope(this._on_socket_error, this);\n\t\t\tthis.socket.onclose = scope(this._on_socket_close, this);\n\n\t\t\tthis.sendPinger = new Pinger(this, this.connectOptions.keepAliveInterval);\n\t\t\tthis.receivePinger = new Pinger(this, this.connectOptions.keepAliveInterval);\n\t\t\tif (this._connectTimeout) {\n\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\tthis._connectTimeout = null;\n\t\t\t}\n\t\t\tthis._connectTimeout = new Timeout(this, this.connectOptions.timeout, this._disconnected,  [ERROR.CONNECT_TIMEOUT.code, format(ERROR.CONNECT_TIMEOUT)]);\n\t\t};\n\n\n\t\t// Schedule a new message to be sent over the WebSockets\n\t\t// connection. CONNECT messages cause WebSocket connection\n\t\t// to be started. All other messages are queued internally\n\t\t// until this has happened. When WS connection starts, process\n\t\t// all outstanding messages.\n\t\tClientImpl.prototype._schedule_message = function (message) {\n\t\t\t// Add messages in fifo order to array, by adding to start\n\t\t\tthis._msg_queue.unshift(message);\n\t\t\t// Process outstanding messages in the queue if we have an  open socket, and have received CONNACK.\n\t\t\tif (this.connected) {\n\t\t\t\tthis._process_queue();\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.store = function(prefix, wireMessage) {\n\t\t\tvar storedMessage = {type:wireMessage.type, messageIdentifier:wireMessage.messageIdentifier, version:1};\n\n\t\t\tswitch(wireMessage.type) {\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tif(wireMessage.pubRecReceived)\n\t\t\t\t\tstoredMessage.pubRecReceived = true;\n\n\t\t\t\t// Convert the payload to a hex string.\n\t\t\t\tstoredMessage.payloadMessage = {};\n\t\t\t\tvar hex = \"\";\n\t\t\t\tvar messageBytes = wireMessage.payloadMessage.payloadBytes;\n\t\t\t\tfor (var i=0; i<messageBytes.length; i++) {\n\t\t\t\t\tif (messageBytes[i] <= 0xF)\n\t\t\t\t\t\thex = hex+\"0\"+messageBytes[i].toString(16);\n\t\t\t\t\telse\n\t\t\t\t\t\thex = hex+messageBytes[i].toString(16);\n\t\t\t\t}\n\t\t\t\tstoredMessage.payloadMessage.payloadHex = hex;\n\n\t\t\t\tstoredMessage.payloadMessage.qos = wireMessage.payloadMessage.qos;\n\t\t\t\tstoredMessage.payloadMessage.destinationName = wireMessage.payloadMessage.destinationName;\n\t\t\t\tif (wireMessage.payloadMessage.duplicate)\n\t\t\t\t\tstoredMessage.payloadMessage.duplicate = true;\n\t\t\t\tif (wireMessage.payloadMessage.retained)\n\t\t\t\t\tstoredMessage.payloadMessage.retained = true;\n\n\t\t\t\t// Add a sequence number to sent messages.\n\t\t\t\tif ( prefix.indexOf(\"Sent:\") === 0 ) {\n\t\t\t\t\tif ( wireMessage.sequence === undefined )\n\t\t\t\t\t\twireMessage.sequence = ++this._sequence;\n\t\t\t\t\tstoredMessage.sequence = wireMessage.sequence;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(format(ERROR.INVALID_STORED_DATA, [prefix+this._localKey+wireMessage.messageIdentifier, storedMessage]));\n\t\t\t}\n\t\t\tlocalStorage.setItem(prefix+this._localKey+wireMessage.messageIdentifier, JSON.stringify(storedMessage));\n\t\t};\n\n\t\tClientImpl.prototype.restore = function(key) {\n\t\t\tvar value = localStorage.getItem(key);\n\t\t\tvar storedMessage = JSON.parse(value);\n\n\t\t\tvar wireMessage = new WireMessage(storedMessage.type, storedMessage);\n\n\t\t\tswitch(storedMessage.type) {\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t// Replace the payload message with a Message object.\n\t\t\t\tvar hex = storedMessage.payloadMessage.payloadHex;\n\t\t\t\tvar buffer = new ArrayBuffer((hex.length)/2);\n\t\t\t\tvar byteStream = new Uint8Array(buffer);\n\t\t\t\tvar i = 0;\n\t\t\t\twhile (hex.length >= 2) {\n\t\t\t\t\tvar x = parseInt(hex.substring(0, 2), 16);\n\t\t\t\t\thex = hex.substring(2, hex.length);\n\t\t\t\t\tbyteStream[i++] = x;\n\t\t\t\t}\n\t\t\t\tvar payloadMessage = new Message(byteStream);\n\n\t\t\t\tpayloadMessage.qos = storedMessage.payloadMessage.qos;\n\t\t\t\tpayloadMessage.destinationName = storedMessage.payloadMessage.destinationName;\n\t\t\t\tif (storedMessage.payloadMessage.duplicate)\n\t\t\t\t\tpayloadMessage.duplicate = true;\n\t\t\t\tif (storedMessage.payloadMessage.retained)\n\t\t\t\t\tpayloadMessage.retained = true;\n\t\t\t\twireMessage.payloadMessage = payloadMessage;\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(format(ERROR.INVALID_STORED_DATA, [key, value]));\n\t\t\t}\n\n\t\t\tif (key.indexOf(\"Sent:\"+this._localKey) === 0) {\n\t\t\t\twireMessage.payloadMessage.duplicate = true;\n\t\t\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t} else if (key.indexOf(\"Received:\"+this._localKey) === 0) {\n\t\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype._process_queue = function () {\n\t\t\tvar message = null;\n\n\t\t\t// Send all queued messages down socket connection\n\t\t\twhile ((message = this._msg_queue.pop())) {\n\t\t\t\tthis._socket_send(message);\n\t\t\t\t// Notify listeners that message was successfully sent\n\t\t\t\tif (this._notify_msg_sent[message]) {\n\t\t\t\t\tthis._notify_msg_sent[message]();\n\t\t\t\t\tdelete this._notify_msg_sent[message];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Expect an ACK response for this message. Add message to the set of in progress\n\t * messages and set an unused identifier in this message.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._requires_ack = function (wireMessage) {\n\t\t\tvar messageCount = Object.keys(this._sentMessages).length;\n\t\t\tif (messageCount > this.maxMessageIdentifier)\n\t\t\t\tthrow Error (\"Too many messages:\"+messageCount);\n\n\t\t\twhile(this._sentMessages[this._message_identifier] !== undefined) {\n\t\t\t\tthis._message_identifier++;\n\t\t\t}\n\t\t\twireMessage.messageIdentifier = this._message_identifier;\n\t\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\tif (wireMessage.type === MESSAGE_TYPE.PUBLISH) {\n\t\t\t\tthis.store(\"Sent:\", wireMessage);\n\t\t\t}\n\t\t\tif (this._message_identifier === this.maxMessageIdentifier) {\n\t\t\t\tthis._message_identifier = 1;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Called when the underlying websocket has been opened.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._on_socket_open = function () {\n\t\t// Create the CONNECT message object.\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.CONNECT, this.connectOptions);\n\t\t\twireMessage.clientId = this.clientId;\n\t\t\tthis._socket_send(wireMessage);\n\t\t};\n\n\t\t/**\n\t * Called when the underlying websocket has received a complete packet.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._on_socket_message = function (event) {\n\t\t\tthis._trace(\"Client._on_socket_message\", event.data);\n\t\t\tvar messages = this._deframeMessages(event.data);\n\t\t\tfor (var i = 0; i < messages.length; i+=1) {\n\t\t\t\tthis._handleMessage(messages[i]);\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype._deframeMessages = function(data) {\n\t\t\tvar byteArray = new Uint8Array(data);\n\t\t\tvar messages = [];\n\t\t\tif (this.receiveBuffer) {\n\t\t\t\tvar newData = new Uint8Array(this.receiveBuffer.length+byteArray.length);\n\t\t\t\tnewData.set(this.receiveBuffer);\n\t\t\t\tnewData.set(byteArray,this.receiveBuffer.length);\n\t\t\t\tbyteArray = newData;\n\t\t\t\tdelete this.receiveBuffer;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tvar offset = 0;\n\t\t\t\twhile(offset < byteArray.length) {\n\t\t\t\t\tvar result = decodeMessage(byteArray,offset);\n\t\t\t\t\tvar wireMessage = result[0];\n\t\t\t\t\toffset = result[1];\n\t\t\t\t\tif (wireMessage !== null) {\n\t\t\t\t\t\tmessages.push(wireMessage);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (offset < byteArray.length) {\n\t\t\t\t\tthis.receiveBuffer = byteArray.subarray(offset);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tvar errorStack = ((error.hasOwnProperty(\"stack\") == \"undefined\") ? error.stack.toString() : \"No Error Stack Available\");\n\t\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,errorStack]));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn messages;\n\t\t};\n\n\t\tClientImpl.prototype._handleMessage = function(wireMessage) {\n\n\t\t\tthis._trace(\"Client._handleMessage\", wireMessage);\n\n\t\t\ttry {\n\t\t\t\tswitch(wireMessage.type) {\n\t\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\t\tif (this._reconnectTimeout)\n\t\t\t\t\t\tthis._reconnectTimeout.cancel();\n\n\t\t\t\t\t// If we have started using clean session then clear up the local state.\n\t\t\t\t\tif (this.connectOptions.cleanSession) {\n\t\t\t\t\t\tfor (var key in this._sentMessages) {\n\t\t\t\t\t\t\tvar sentMessage = this._sentMessages[key];\n\t\t\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+sentMessage.messageIdentifier);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._sentMessages = {};\n\n\t\t\t\t\t\tfor (var key in this._receivedMessages) {\n\t\t\t\t\t\t\tvar receivedMessage = this._receivedMessages[key];\n\t\t\t\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+receivedMessage.messageIdentifier);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._receivedMessages = {};\n\t\t\t\t\t}\n\t\t\t\t\t// Client connected and ready for business.\n\t\t\t\t\tif (wireMessage.returnCode === 0) {\n\n\t\t\t\t\t\tthis.connected = true;\n\t\t\t\t\t\t// Jump to the end of the list of uris and stop looking for a good host.\n\n\t\t\t\t\t\tif (this.connectOptions.uris)\n\t\t\t\t\t\t\tthis.hostIndex = this.connectOptions.uris.length;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._disconnected(ERROR.CONNACK_RETURNCODE.code , format(ERROR.CONNACK_RETURNCODE, [wireMessage.returnCode, CONNACK_RC[wireMessage.returnCode]]));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Resend messages.\n\t\t\t\t\tvar sequencedMessages = [];\n\t\t\t\t\tfor (var msgId in this._sentMessages) {\n\t\t\t\t\t\tif (this._sentMessages.hasOwnProperty(msgId))\n\t\t\t\t\t\t\tsequencedMessages.push(this._sentMessages[msgId]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Also schedule qos 0 buffered messages if any\n\t\t\t\t\tif (this._buffered_msg_queue.length > 0) {\n\t\t\t\t\t\tvar msg = null;\n\t\t\t\t\t\twhile ((msg = this._buffered_msg_queue.pop())) {\n\t\t\t\t\t\t\tsequencedMessages.push(msg);\n\t\t\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\t\t\tthis._notify_msg_sent[msg] = this.onMessageDelivered(msg.payloadMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Sort sentMessages into the original sent order.\n\t\t\t\t\tvar sequencedMessages = sequencedMessages.sort(function(a,b) {return a.sequence - b.sequence;} );\n\t\t\t\t\tfor (var i=0, len=sequencedMessages.length; i<len; i++) {\n\t\t\t\t\t\tvar sentMessage = sequencedMessages[i];\n\t\t\t\t\t\tif (sentMessage.type == MESSAGE_TYPE.PUBLISH && sentMessage.pubRecReceived) {\n\t\t\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:sentMessage.messageIdentifier});\n\t\t\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._schedule_message(sentMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Execute the connectOptions.onSuccess callback if there is one.\n\t\t\t\t\t// Will also now return if this connection was the result of an automatic\n\t\t\t\t\t// reconnect and which URI was successfully connected to.\n\t\t\t\t\tif (this.connectOptions.onSuccess) {\n\t\t\t\t\t\tthis.connectOptions.onSuccess({invocationContext:this.connectOptions.invocationContext});\n\t\t\t\t\t}\n\n\t\t\t\t\tvar reconnected = false;\n\t\t\t\t\tif (this._reconnecting) {\n\t\t\t\t\t\treconnected = true;\n\t\t\t\t\t\tthis._reconnectInterval = 1;\n\t\t\t\t\t\tthis._reconnecting = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Execute the onConnected callback if there is one.\n\t\t\t\t\tthis._connected(reconnected, this._wsuri);\n\n\t\t\t\t\t// Process all queued messages now that the connection is established.\n\t\t\t\t\tthis._process_queue();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t\tthis._receivePublish(wireMessage);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t// If this is a re flow of a PUBACK after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBREC:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t// If this is a re flow of a PUBREC after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tsentMessage.pubRecReceived = true;\n\t\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\t\t\tthis.store(\"Sent:\", sentMessage);\n\t\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\t\tvar receivedMessage = this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\t// If this is a re flow of a PUBREL after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (receivedMessage) {\n\t\t\t\t\t\tthis._receiveMessage(receivedMessage);\n\t\t\t\t\t\tdelete this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\t\t\t\t\t// Always flow PubComp, we may have previously flowed PubComp but the server lost it and restarted.\n\t\t\t\t\tvar pubCompMessage = new WireMessage(MESSAGE_TYPE.PUBCOMP, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\t\tthis._schedule_message(pubCompMessage);\n\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBCOMP:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.SUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tif(sentMessage.timeOut)\n\t\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\t\t// This will need to be fixed when we add multiple topic support\n\t\t\t\t\t\tif (wireMessage.returnCode[0] === 0x80) {\n\t\t\t\t\t\t\tif (sentMessage.onFailure) {\n\t\t\t\t\t\t\t\tsentMessage.onFailure(wireMessage.returnCode);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (sentMessage.onSuccess) {\n\t\t\t\t\t\t\tsentMessage.onSuccess(wireMessage.returnCode);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.UNSUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tif (sentMessage.timeOut)\n\t\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\t\tif (sentMessage.callback) {\n\t\t\t\t\t\t\tsentMessage.callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PINGRESP:\n\t\t\t\t/* The sendPinger or receivePinger may have sent a ping, the receivePinger has already been reset. */\n\t\t\t\t\tthis.sendPinger.reset();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\t// Clients do not expect to receive disconnect packets.\n\t\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tvar errorStack = ((error.hasOwnProperty(\"stack\") == \"undefined\") ? error.stack.toString() : \"No Error Stack Available\");\n\t\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,errorStack]));\n\t\t\t\treturn;\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._on_socket_error = function (error) {\n\t\t\tif (!this._reconnecting) {\n\t\t\t\tthis._disconnected(ERROR.SOCKET_ERROR.code , format(ERROR.SOCKET_ERROR, [error.data]));\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._on_socket_close = function () {\n\t\t\tif (!this._reconnecting) {\n\t\t\t\tthis._disconnected(ERROR.SOCKET_CLOSE.code , format(ERROR.SOCKET_CLOSE));\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._socket_send = function (wireMessage) {\n\n\t\t\tif (wireMessage.type == 1) {\n\t\t\t\tvar wireMessageMasked = this._traceMask(wireMessage, \"password\");\n\t\t\t\tthis._trace(\"Client._socket_send\", wireMessageMasked);\n\t\t\t}\n\t\t\telse this._trace(\"Client._socket_send\", wireMessage);\n\n\t\t\tthis.socket.send(wireMessage.encode());\n\t\t\t/* We have proved to the server we are alive. */\n\t\t\tthis.sendPinger.reset();\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._receivePublish = function (wireMessage) {\n\t\t\tswitch(wireMessage.payloadMessage.qos) {\n\t\t\tcase \"undefined\":\n\t\t\tcase 0:\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\tvar pubAckMessage = new WireMessage(MESSAGE_TYPE.PUBACK, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubAckMessage);\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t\tthis.store(\"Received:\", wireMessage);\n\t\t\t\tvar pubRecMessage = new WireMessage(MESSAGE_TYPE.PUBREC, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubRecMessage);\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(\"Invaild qos=\" + wireMessage.payloadMessage.qos);\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._receiveMessage = function (wireMessage) {\n\t\t\tif (this.onMessageArrived) {\n\t\t\t\tthis.onMessageArrived(wireMessage.payloadMessage);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Client has connected.\n\t * @param {reconnect} [boolean] indicate if this was a result of reconnect operation.\n\t * @param {uri} [string] fully qualified WebSocket URI of the server.\n\t */\n\t\tClientImpl.prototype._connected = function (reconnect, uri) {\n\t\t// Execute the onConnected callback if there is one.\n\t\t\tif (this.onConnected)\n\t\t\t\tthis.onConnected(reconnect, uri);\n\t\t};\n\n\t\t/**\n\t * Attempts to reconnect the client to the server.\n   * For each reconnect attempt, will double the reconnect interval\n   * up to 128 seconds.\n\t */\n\t\tClientImpl.prototype._reconnect = function () {\n\t\t\tthis._trace(\"Client._reconnect\");\n\t\t\tif (!this.connected) {\n\t\t\t\tthis._reconnecting = true;\n\t\t\t\tthis.sendPinger.cancel();\n\t\t\t\tthis.receivePinger.cancel();\n\t\t\t\tif (this._reconnectInterval < 128)\n\t\t\t\t\tthis._reconnectInterval = this._reconnectInterval * 2;\n\t\t\t\tif (this.connectOptions.uris) {\n\t\t\t\t\tthis.hostIndex = 0;\n\t\t\t\t\tthis._doConnect(this.connectOptions.uris[0]);\n\t\t\t\t} else {\n\t\t\t\t\tthis._doConnect(this.uri);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Client has disconnected either at its own request or because the server\n\t * or network disconnected it. Remove all non-durable state.\n\t * @param {errorCode} [number] the error number.\n\t * @param {errorText} [string] the error text.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._disconnected = function (errorCode, errorText) {\n\t\t\tthis._trace(\"Client._disconnected\", errorCode, errorText);\n\n\t\t\tif (errorCode !== undefined && this._reconnecting) {\n\t\t\t\t//Continue automatic reconnect process\n\t\t\t\tthis._reconnectTimeout = new Timeout(this, this._reconnectInterval, this._reconnect);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.sendPinger.cancel();\n\t\t\tthis.receivePinger.cancel();\n\t\t\tif (this._connectTimeout) {\n\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\tthis._connectTimeout = null;\n\t\t\t}\n\n\t\t\t// Clear message buffers.\n\t\t\tthis._msg_queue = [];\n\t\t\tthis._buffered_msg_queue = [];\n\t\t\tthis._notify_msg_sent = {};\n\n\t\t\tif (this.socket) {\n\t\t\t// Cancel all socket callbacks so that they cannot be driven again by this socket.\n\t\t\t\tthis.socket.onopen = null;\n\t\t\t\tthis.socket.onmessage = null;\n\t\t\t\tthis.socket.onerror = null;\n\t\t\t\tthis.socket.onclose = null;\n\t\t\t\tif (this.socket.readyState === 1)\n\t\t\t\t\tthis.socket.close();\n\t\t\t\tdelete this.socket;\n\t\t\t}\n\n\t\t\tif (this.connectOptions.uris && this.hostIndex < this.connectOptions.uris.length-1) {\n\t\t\t// Try the next host.\n\t\t\t\tthis.hostIndex++;\n\t\t\t\tthis._doConnect(this.connectOptions.uris[this.hostIndex]);\n\t\t\t} else {\n\n\t\t\t\tif (errorCode === undefined) {\n\t\t\t\t\terrorCode = ERROR.OK.code;\n\t\t\t\t\terrorText = format(ERROR.OK);\n\t\t\t\t}\n\n\t\t\t\t// Run any application callbacks last as they may attempt to reconnect and hence create a new socket.\n\t\t\t\tif (this.connected) {\n\t\t\t\t\tthis.connected = false;\n\t\t\t\t\t// Execute the connectionLostCallback if there is one, and we were connected.\n\t\t\t\t\tif (this.onConnectionLost) {\n\t\t\t\t\t\tthis.onConnectionLost({errorCode:errorCode, errorMessage:errorText, reconnect:this.connectOptions.reconnect, uri:this._wsuri});\n\t\t\t\t\t}\n\t\t\t\t\tif (errorCode !== ERROR.OK.code && this.connectOptions.reconnect) {\n\t\t\t\t\t// Start automatic reconnect process for the very first time since last successful connect.\n\t\t\t\t\t\tthis._reconnectInterval = 1;\n\t\t\t\t\t\tthis._reconnect();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t// Otherwise we never had a connection, so indicate that the connect has failed.\n\t\t\t\t\tif (this.connectOptions.mqttVersion === 4 && this.connectOptions.mqttVersionExplicit === false) {\n\t\t\t\t\t\tthis._trace(\"Failed to connect V4, dropping back to V3\");\n\t\t\t\t\t\tthis.connectOptions.mqttVersion = 3;\n\t\t\t\t\t\tif (this.connectOptions.uris) {\n\t\t\t\t\t\t\tthis.hostIndex = 0;\n\t\t\t\t\t\t\tthis._doConnect(this.connectOptions.uris[0]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._doConnect(this.uri);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if(this.connectOptions.onFailure) {\n\t\t\t\t\t\tthis.connectOptions.onFailure({invocationContext:this.connectOptions.invocationContext, errorCode:errorCode, errorMessage:errorText});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._trace = function () {\n\t\t// Pass trace message back to client's callback function\n\t\t\tif (this.traceFunction) {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\t\tfor (var i in args)\n\t\t\t\t{\n\t\t\t\t\tif (typeof args[i] !== \"undefined\")\n\t\t\t\t\t\targs.splice(i, 1, JSON.stringify(args[i]));\n\t\t\t\t}\n\t\t\t\tvar record = args.join(\"\");\n\t\t\t\tthis.traceFunction ({severity: \"Debug\", message: record\t});\n\t\t\t}\n\n\t\t\t//buffer style trace\n\t\t\tif ( this._traceBuffer !== null ) {\n\t\t\t\tfor (var i = 0, max = arguments.length; i < max; i++) {\n\t\t\t\t\tif ( this._traceBuffer.length == this._MAX_TRACE_ENTRIES ) {\n\t\t\t\t\t\tthis._traceBuffer.shift();\n\t\t\t\t\t}\n\t\t\t\t\tif (i === 0) this._traceBuffer.push(arguments[i]);\n\t\t\t\t\telse if (typeof arguments[i] === \"undefined\" ) this._traceBuffer.push(arguments[i]);\n\t\t\t\t\telse this._traceBuffer.push(\"  \"+JSON.stringify(arguments[i]));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._traceMask = function (traceObject, masked) {\n\t\t\tvar traceObjectMasked = {};\n\t\t\tfor (var attr in traceObject) {\n\t\t\t\tif (traceObject.hasOwnProperty(attr)) {\n\t\t\t\t\tif (attr == masked)\n\t\t\t\t\t\ttraceObjectMasked[attr] = \"******\";\n\t\t\t\t\telse\n\t\t\t\t\t\ttraceObjectMasked[attr] = traceObject[attr];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn traceObjectMasked;\n\t\t};\n\n\t\t// ------------------------------------------------------------------------\n\t\t// Public Programming interface.\n\t\t// ------------------------------------------------------------------------\n\n\t\t/**\n\t * The JavaScript application communicates to the server using a {@link Paho.Client} object.\n\t * <p>\n\t * Most applications will create just one Client object and then call its connect() method,\n\t * however applications can create more than one Client object if they wish.\n\t * In this case the combination of host, port and clientId attributes must be different for each Client object.\n\t * <p>\n\t * The send, subscribe and unsubscribe methods are implemented as asynchronous JavaScript methods\n\t * (even though the underlying protocol exchange might be synchronous in nature).\n\t * This means they signal their completion by calling back to the application,\n\t * via Success or Failure callback functions provided by the application on the method in question.\n\t * Such callbacks are called at most once per method invocation and do not persist beyond the lifetime\n\t * of the script that made the invocation.\n\t * <p>\n\t * In contrast there are some callback functions, most notably <i>onMessageArrived</i>,\n\t * that are defined on the {@link Paho.Client} object.\n\t * These may get called multiple times, and aren't directly related to specific method invocations made by the client.\n\t *\n\t * @name Paho.Client\n\t *\n\t * @constructor\n\t *\n\t * @param {string} host - the address of the messaging server, as a fully qualified WebSocket URI, as a DNS name or dotted decimal IP address.\n\t * @param {number} port - the port number to connect to - only required if host is not a URI\n\t * @param {string} path - the path on the host to connect to - only used if host is not a URI. Default: '/mqtt'.\n\t * @param {string} clientId - the Messaging client identifier, between 1 and 23 characters in length.\n\t *\n\t * @property {string} host - <i>read only</i> the server's DNS hostname or dotted decimal IP address.\n\t * @property {number} port - <i>read only</i> the server's port.\n\t * @property {string} path - <i>read only</i> the server's path.\n\t * @property {string} clientId - <i>read only</i> used when connecting to the server.\n\t * @property {function} onConnectionLost - called when a connection has been lost.\n\t *                            after a connect() method has succeeded.\n\t *                            Establish the call back used when a connection has been lost. The connection may be\n\t *                            lost because the client initiates a disconnect or because the server or network\n\t *                            cause the client to be disconnected. The disconnect call back may be called without\n\t *                            the connectionComplete call back being invoked if, for example the client fails to\n\t *                            connect.\n\t *                            A single response object parameter is passed to the onConnectionLost callback containing the following fields:\n\t *                            <ol>\n\t *                            <li>errorCode\n\t *                            <li>errorMessage\n\t *                            </ol>\n\t * @property {function} onMessageDelivered - called when a message has been delivered.\n\t *                            All processing that this Client will ever do has been completed. So, for example,\n\t *                            in the case of a Qos=2 message sent by this client, the PubComp flow has been received from the server\n\t *                            and the message has been removed from persistent storage before this callback is invoked.\n\t *                            Parameters passed to the onMessageDelivered callback are:\n\t *                            <ol>\n\t *                            <li>{@link Paho.Message} that was delivered.\n\t *                            </ol>\n\t * @property {function} onMessageArrived - called when a message has arrived in this Paho.client.\n\t *                            Parameters passed to the onMessageArrived callback are:\n\t *                            <ol>\n\t *                            <li>{@link Paho.Message} that has arrived.\n\t *                            </ol>\n\t * @property {function} onConnected - called when a connection is successfully made to the server.\n\t *                                  after a connect() method.\n\t *                                  Parameters passed to the onConnected callback are:\n\t *                                  <ol>\n\t *                                  <li>reconnect (boolean) - If true, the connection was the result of a reconnect.</li>\n\t *                                  <li>URI (string) - The URI used to connect to the server.</li>\n\t *                                  </ol>\n\t * @property {boolean} disconnectedPublishing - if set, will enable disconnected publishing in\n\t *                                            in the event that the connection to the server is lost.\n\t * @property {number} disconnectedBufferSize - Used to set the maximum number of messages that the disconnected\n\t *                                             buffer will hold before rejecting new messages. Default size: 5000 messages\n\t * @property {function} trace - called whenever trace is called. TODO\n\t */\n\t\tvar Client = function (host, port, path, clientId) {\n\n\t\t\tvar uri;\n\n\t\t\tif (typeof host !== \"string\")\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof host, \"host\"]));\n\n\t\t\tif (arguments.length == 2) {\n\t\t\t// host: must be full ws:// uri\n\t\t\t// port: clientId\n\t\t\t\tclientId = port;\n\t\t\t\turi = host;\n\t\t\t\tvar match = uri.match(/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/);\n\t\t\t\tif (match) {\n\t\t\t\t\thost = match[4]||match[2];\n\t\t\t\t\tport = parseInt(match[7]);\n\t\t\t\t\tpath = match[8];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[host,\"host\"]));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (arguments.length == 3) {\n\t\t\t\t\tclientId = path;\n\t\t\t\t\tpath = \"/mqtt\";\n\t\t\t\t}\n\t\t\t\tif (typeof port !== \"number\" || port < 0)\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof port, \"port\"]));\n\t\t\t\tif (typeof path !== \"string\")\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof path, \"path\"]));\n\n\t\t\t\tvar ipv6AddSBracket = (host.indexOf(\":\") !== -1 && host.slice(0,1) !== \"[\" && host.slice(-1) !== \"]\");\n\t\t\t\turi = \"ws://\"+(ipv6AddSBracket?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t\t}\n\n\t\t\tvar clientIdLength = 0;\n\t\t\tfor (var i = 0; i<clientId.length; i++) {\n\t\t\t\tvar charCode = clientId.charCodeAt(i);\n\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF)  {\n\t\t\t\t\ti++; // Surrogate pair.\n\t\t\t\t}\n\t\t\t\tclientIdLength++;\n\t\t\t}\n\t\t\tif (typeof clientId !== \"string\" || clientIdLength > 65535)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [clientId, \"clientId\"]));\n\n\t\t\tvar client = new ClientImpl(uri, host, port, path, clientId);\n\n\t\t\t//Public Properties\n\t\t\tObject.defineProperties(this,{\n\t\t\t\t\"host\":{\n\t\t\t\t\tget: function() { return host; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"port\":{\n\t\t\t\t\tget: function() { return port; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"path\":{\n\t\t\t\t\tget: function() { return path; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"uri\":{\n\t\t\t\t\tget: function() { return uri; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"clientId\":{\n\t\t\t\t\tget: function() { return client.clientId; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"onConnected\":{\n\t\t\t\t\tget: function() { return client.onConnected; },\n\t\t\t\t\tset: function(newOnConnected) {\n\t\t\t\t\t\tif (typeof newOnConnected === \"function\")\n\t\t\t\t\t\t\tclient.onConnected = newOnConnected;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnected, \"onConnected\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"disconnectedPublishing\":{\n\t\t\t\t\tget: function() { return client.disconnectedPublishing; },\n\t\t\t\t\tset: function(newDisconnectedPublishing) {\n\t\t\t\t\t\tclient.disconnectedPublishing = newDisconnectedPublishing;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"disconnectedBufferSize\":{\n\t\t\t\t\tget: function() { return client.disconnectedBufferSize; },\n\t\t\t\t\tset: function(newDisconnectedBufferSize) {\n\t\t\t\t\t\tclient.disconnectedBufferSize = newDisconnectedBufferSize;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onConnectionLost\":{\n\t\t\t\t\tget: function() { return client.onConnectionLost; },\n\t\t\t\t\tset: function(newOnConnectionLost) {\n\t\t\t\t\t\tif (typeof newOnConnectionLost === \"function\")\n\t\t\t\t\t\t\tclient.onConnectionLost = newOnConnectionLost;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnectionLost, \"onConnectionLost\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onMessageDelivered\":{\n\t\t\t\t\tget: function() { return client.onMessageDelivered; },\n\t\t\t\t\tset: function(newOnMessageDelivered) {\n\t\t\t\t\t\tif (typeof newOnMessageDelivered === \"function\")\n\t\t\t\t\t\t\tclient.onMessageDelivered = newOnMessageDelivered;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageDelivered, \"onMessageDelivered\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onMessageArrived\":{\n\t\t\t\t\tget: function() { return client.onMessageArrived; },\n\t\t\t\t\tset: function(newOnMessageArrived) {\n\t\t\t\t\t\tif (typeof newOnMessageArrived === \"function\")\n\t\t\t\t\t\t\tclient.onMessageArrived = newOnMessageArrived;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageArrived, \"onMessageArrived\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"trace\":{\n\t\t\t\t\tget: function() { return client.traceFunction; },\n\t\t\t\t\tset: function(trace) {\n\t\t\t\t\t\tif(typeof trace === \"function\"){\n\t\t\t\t\t\t\tclient.traceFunction = trace;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof trace, \"onTrace\"]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t/**\n\t\t * Connect this Messaging client to its server.\n\t\t *\n\t\t * @name Paho.Client#connect\n\t\t * @function\n\t\t * @param {object} connectOptions - Attributes used with the connection.\n\t\t * @param {number} connectOptions.timeout - If the connect has not succeeded within this\n\t\t *                    number of seconds, it is deemed to have failed.\n\t\t *                    The default is 30 seconds.\n\t\t * @param {string} connectOptions.userName - Authentication username for this connection.\n\t\t * @param {string} connectOptions.password - Authentication password for this connection.\n\t\t * @param {Paho.Message} connectOptions.willMessage - sent by the server when the client\n\t\t *                    disconnects abnormally.\n\t\t * @param {number} connectOptions.keepAliveInterval - the server disconnects this client if\n\t\t *                    there is no activity for this number of seconds.\n\t\t *                    The default value of 60 seconds is assumed if not set.\n\t\t * @param {boolean} connectOptions.cleanSession - if true(default) the client and server\n\t\t *                    persistent state is deleted on successful connect.\n\t\t * @param {boolean} connectOptions.useSSL - if present and true, use an SSL Websocket connection.\n\t\t * @param {object} connectOptions.invocationContext - passed to the onSuccess callback or onFailure callback.\n\t\t * @param {function} connectOptions.onSuccess - called when the connect acknowledgement\n\t\t *                    has been received from the server.\n\t\t * A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onSuccess method in the connectOptions.\n\t\t * </ol>\n\t * @param {function} connectOptions.onFailure - called when the connect request has failed or timed out.\n\t\t * A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onFailure method in the connectOptions.\n\t\t * <li>errorCode a number indicating the nature of the error.\n\t\t * <li>errorMessage text describing the error.\n\t\t * </ol>\n\t * @param {array} connectOptions.hosts - If present this contains either a set of hostnames or fully qualified\n\t\t * WebSocket URIs (ws://iot.eclipse.org:80/ws), that are tried in order in place\n\t\t * of the host and port paramater on the construtor. The hosts are tried one at at time in order until\n\t\t * one of then succeeds.\n\t * @param {array} connectOptions.ports - If present the set of ports matching the hosts. If hosts contains URIs, this property\n\t\t * is not used.\n\t * @param {boolean} connectOptions.reconnect - Sets whether the client will automatically attempt to reconnect\n\t * to the server if the connection is lost.\n\t *<ul>\n\t *<li>If set to false, the client will not attempt to automatically reconnect to the server in the event that the\n\t * connection is lost.</li>\n\t *<li>If set to true, in the event that the connection is lost, the client will attempt to reconnect to the server.\n\t * It will initially wait 1 second before it attempts to reconnect, for every failed reconnect attempt, the delay\n\t * will double until it is at 2 minutes at which point the delay will stay at 2 minutes.</li>\n\t *</ul>\n\t * @param {number} connectOptions.mqttVersion - The version of MQTT to use to connect to the MQTT Broker.\n\t *<ul>\n\t *<li>3 - MQTT V3.1</li>\n\t *<li>4 - MQTT V3.1.1</li>\n\t *</ul>\n\t * @param {boolean} connectOptions.mqttVersionExplicit - If set to true, will force the connection to use the\n\t * selected MQTT Version or will fail to connect.\n\t * @param {array} connectOptions.uris - If present, should contain a list of fully qualified WebSocket uris\n\t * (e.g. ws://iot.eclipse.org:80/ws), that are tried in order in place of the host and port parameter of the construtor.\n\t * The uris are tried one at a time in order until one of them succeeds. Do not use this in conjunction with hosts as\n\t * the hosts array will be converted to uris and will overwrite this property.\n\t\t * @throws {InvalidState} If the client is not in disconnected state. The client must have received connectionLost\n\t\t * or disconnected before calling connect for a second or subsequent time.\n\t\t */\n\t\t\tthis.connect = function (connectOptions) {\n\t\t\t\tconnectOptions = connectOptions || {} ;\n\t\t\t\tvalidate(connectOptions,  {timeout:\"number\",\n\t\t\t\t\tuserName:\"string\",\n\t\t\t\t\tpassword:\"string\",\n\t\t\t\t\twillMessage:\"object\",\n\t\t\t\t\tkeepAliveInterval:\"number\",\n\t\t\t\t\tcleanSession:\"boolean\",\n\t\t\t\t\tuseSSL:\"boolean\",\n\t\t\t\t\tinvocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\thosts:\"object\",\n\t\t\t\t\tports:\"object\",\n\t\t\t\t\treconnect:\"boolean\",\n\t\t\t\t\tmqttVersion:\"number\",\n\t\t\t\t\tmqttVersionExplicit:\"boolean\",\n\t\t\t\t\turis: \"object\"});\n\n\t\t\t\t// If no keep alive interval is set, assume 60 seconds.\n\t\t\t\tif (connectOptions.keepAliveInterval === undefined)\n\t\t\t\t\tconnectOptions.keepAliveInterval = 60;\n\n\t\t\t\tif (connectOptions.mqttVersion > 4 || connectOptions.mqttVersion < 3) {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.mqttVersion, \"connectOptions.mqttVersion\"]));\n\t\t\t\t}\n\n\t\t\t\tif (connectOptions.mqttVersion === undefined) {\n\t\t\t\t\tconnectOptions.mqttVersionExplicit = false;\n\t\t\t\t\tconnectOptions.mqttVersion = 4;\n\t\t\t\t} else {\n\t\t\t\t\tconnectOptions.mqttVersionExplicit = true;\n\t\t\t\t}\n\n\t\t\t\t//Check that if password is set, so is username\n\t\t\t\tif (connectOptions.password !== undefined && connectOptions.userName === undefined)\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.password, \"connectOptions.password\"]));\n\n\t\t\t\tif (connectOptions.willMessage) {\n\t\t\t\t\tif (!(connectOptions.willMessage instanceof Message))\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [connectOptions.willMessage, \"connectOptions.willMessage\"]));\n\t\t\t\t\t// The will message must have a payload that can be represented as a string.\n\t\t\t\t\t// Cause the willMessage to throw an exception if this is not the case.\n\t\t\t\t\tconnectOptions.willMessage.stringPayload = null;\n\n\t\t\t\t\tif (typeof connectOptions.willMessage.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.willMessage.destinationName, \"connectOptions.willMessage.destinationName\"]));\n\t\t\t\t}\n\t\t\t\tif (typeof connectOptions.cleanSession === \"undefined\")\n\t\t\t\t\tconnectOptions.cleanSession = true;\n\t\t\t\tif (connectOptions.hosts) {\n\n\t\t\t\t\tif (!(connectOptions.hosts instanceof Array) )\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\t\t\t\t\tif (connectOptions.hosts.length <1 )\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\n\t\t\t\t\tvar usingURIs = false;\n\t\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\t\tif (typeof connectOptions.hosts[i] !== \"string\")\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\tif (/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/.test(connectOptions.hosts[i])) {\n\t\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\t\tusingURIs = true;\n\t\t\t\t\t\t\t} else if (!usingURIs) {\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (usingURIs) {\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!usingURIs) {\n\t\t\t\t\t\tif (!connectOptions.ports)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\t\tif (!(connectOptions.ports instanceof Array) )\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\t\tif (connectOptions.hosts.length !== connectOptions.ports.length)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\n\t\t\t\t\t\tconnectOptions.uris = [];\n\n\t\t\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\t\t\tif (typeof connectOptions.ports[i] !== \"number\" || connectOptions.ports[i] < 0)\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.ports[i], \"connectOptions.ports[\"+i+\"]\"]));\n\t\t\t\t\t\t\tvar host = connectOptions.hosts[i];\n\t\t\t\t\t\t\tvar port = connectOptions.ports[i];\n\n\t\t\t\t\t\t\tvar ipv6 = (host.indexOf(\":\") !== -1);\n\t\t\t\t\t\t\turi = \"ws://\"+(ipv6?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t\t\t\t\t\tconnectOptions.uris.push(uri);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconnectOptions.uris = connectOptions.hosts;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tclient.connect(connectOptions);\n\t\t\t};\n\n\t\t\t/**\n\t\t * Subscribe for messages, request receipt of a copy of messages sent to the destinations described by the filter.\n\t\t *\n\t\t * @name Paho.Client#subscribe\n\t\t * @function\n\t\t * @param {string} filter describing the destinations to receive messages from.\n\t\t * <br>\n\t\t * @param {object} subscribeOptions - used to control the subscription\n\t\t *\n\t\t * @param {number} subscribeOptions.qos - the maximum qos of any publications sent\n\t\t *                                  as a result of making this subscription.\n\t\t * @param {object} subscribeOptions.invocationContext - passed to the onSuccess callback\n\t\t *                                  or onFailure callback.\n\t\t * @param {function} subscribeOptions.onSuccess - called when the subscribe acknowledgement\n\t\t *                                  has been received from the server.\n\t\t *                                  A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext if set in the subscribeOptions.\n\t\t *                                  </ol>\n\t\t * @param {function} subscribeOptions.onFailure - called when the subscribe request has failed or timed out.\n\t\t *                                  A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext - if set in the subscribeOptions.\n\t\t *                                  <li>errorCode - a number indicating the nature of the error.\n\t\t *                                  <li>errorMessage - text describing the error.\n\t\t *                                  </ol>\n\t\t * @param {number} subscribeOptions.timeout - which, if present, determines the number of\n\t\t *                                  seconds after which the onFailure calback is called.\n\t\t *                                  The presence of a timeout does not prevent the onSuccess\n\t\t *                                  callback from being called when the subscribe completes.\n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\t\tthis.subscribe = function (filter, subscribeOptions) {\n\t\t\t\tif (typeof filter !== \"string\" && filter.constructor !== Array)\n\t\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\t\tsubscribeOptions = subscribeOptions || {} ;\n\t\t\t\tvalidate(subscribeOptions,  {qos:\"number\",\n\t\t\t\t\tinvocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\ttimeout:\"number\"\n\t\t\t\t});\n\t\t\t\tif (subscribeOptions.timeout && !subscribeOptions.onFailure)\n\t\t\t\t\tthrow new Error(\"subscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\t\tif (typeof subscribeOptions.qos !== \"undefined\" && !(subscribeOptions.qos === 0 || subscribeOptions.qos === 1 || subscribeOptions.qos === 2 ))\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [subscribeOptions.qos, \"subscribeOptions.qos\"]));\n\t\t\t\tclient.subscribe(filter, subscribeOptions);\n\t\t\t};\n\n\t\t/**\n\t\t * Unsubscribe for messages, stop receiving messages sent to destinations described by the filter.\n\t\t *\n\t\t * @name Paho.Client#unsubscribe\n\t\t * @function\n\t\t * @param {string} filter - describing the destinations to receive messages from.\n\t\t * @param {object} unsubscribeOptions - used to control the subscription\n\t\t * @param {object} unsubscribeOptions.invocationContext - passed to the onSuccess callback\n\t\t\t\t\t\t\t\t\t\t\t  or onFailure callback.\n\t\t * @param {function} unsubscribeOptions.onSuccess - called when the unsubscribe acknowledgement has been received from the server.\n\t\t *                                    A single response object parameter is passed to the\n\t\t *                                    onSuccess callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.\n\t\t *                                    </ol>\n\t\t * @param {function} unsubscribeOptions.onFailure called when the unsubscribe request has failed or timed out.\n\t\t *                                    A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.\n\t\t *                                    <li>errorCode - a number indicating the nature of the error.\n\t\t *                                    <li>errorMessage - text describing the error.\n\t\t *                                    </ol>\n\t\t * @param {number} unsubscribeOptions.timeout - which, if present, determines the number of seconds\n\t\t *                                    after which the onFailure callback is called. The presence of\n\t\t *                                    a timeout does not prevent the onSuccess callback from being\n\t\t *                                    called when the unsubscribe completes\n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\t\tthis.unsubscribe = function (filter, unsubscribeOptions) {\n\t\t\t\tif (typeof filter !== \"string\" && filter.constructor !== Array)\n\t\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\t\tunsubscribeOptions = unsubscribeOptions || {} ;\n\t\t\t\tvalidate(unsubscribeOptions,  {invocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\ttimeout:\"number\"\n\t\t\t\t});\n\t\t\t\tif (unsubscribeOptions.timeout && !unsubscribeOptions.onFailure)\n\t\t\t\t\tthrow new Error(\"unsubscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\t\tclient.unsubscribe(filter, unsubscribeOptions);\n\t\t\t};\n\n\t\t\t/**\n\t\t * Send a message to the consumers of the destination in the Message.\n\t\t *\n\t\t * @name Paho.Client#send\n\t\t * @function\n\t\t * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the destination to which the message is to be sent.\n\t\t * \t\t\t\t\t   - If it is the only parameter, used as Paho.Message object.\n\t\t * @param {String|ArrayBuffer} payload - The message data to be sent.\n\t\t * @param {number} qos The Quality of Service used to deliver the message.\n\t\t * \t\t<dl>\n\t\t * \t\t\t<dt>0 Best effort (default).\n\t\t *     \t\t\t<dt>1 At least once.\n\t\t *     \t\t\t<dt>2 Exactly once.\n\t\t * \t\t</dl>\n\t\t * @param {Boolean} retained If true, the message is to be retained by the server and delivered\n\t\t *                     to both current and future subscriptions.\n\t\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t\t *                     A received message has the retained boolean set to true if the message was published\n\t\t *                     with the retained boolean set to true\n\t\t *                     and the subscrption was made after the message has been published.\n\t\t * @throws {InvalidState} if the client is not connected.\n\t\t */\n\t\t\tthis.send = function (topic,payload,qos,retained) {\n\t\t\t\tvar message ;\n\n\t\t\t\tif(arguments.length === 0){\n\t\t\t\t\tthrow new Error(\"Invalid argument.\"+\"length\");\n\n\t\t\t\t}else if(arguments.length == 1) {\n\n\t\t\t\t\tif (!(topic instanceof Message) && (typeof topic !== \"string\"))\n\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+ typeof topic);\n\n\t\t\t\t\tmessage = topic;\n\t\t\t\t\tif (typeof message.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,\"Message.destinationName\"]));\n\t\t\t\t\tclient.send(message);\n\n\t\t\t\t}else {\n\t\t\t\t//parameter checking in Message object\n\t\t\t\t\tmessage = new Message(payload);\n\t\t\t\t\tmessage.destinationName = topic;\n\t\t\t\t\tif(arguments.length >= 3)\n\t\t\t\t\t\tmessage.qos = qos;\n\t\t\t\t\tif(arguments.length >= 4)\n\t\t\t\t\t\tmessage.retained = retained;\n\t\t\t\t\tclient.send(message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t * Publish a message to the consumers of the destination in the Message.\n\t\t * Synonym for Paho.Mqtt.Client#send\n\t\t *\n\t\t * @name Paho.Client#publish\n\t\t * @function\n\t\t * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the topic to which the message is to be published.\n\t\t * \t\t\t\t\t   - If it is the only parameter, used as Paho.Message object.\n\t\t * @param {String|ArrayBuffer} payload - The message data to be published.\n\t\t * @param {number} qos The Quality of Service used to deliver the message.\n\t\t * \t\t<dl>\n\t\t * \t\t\t<dt>0 Best effort (default).\n\t\t *     \t\t\t<dt>1 At least once.\n\t\t *     \t\t\t<dt>2 Exactly once.\n\t\t * \t\t</dl>\n\t\t * @param {Boolean} retained If true, the message is to be retained by the server and delivered\n\t\t *                     to both current and future subscriptions.\n\t\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t\t *                     A received message has the retained boolean set to true if the message was published\n\t\t *                     with the retained boolean set to true\n\t\t *                     and the subscrption was made after the message has been published.\n\t\t * @throws {InvalidState} if the client is not connected.\n\t\t */\n\t\t\tthis.publish = function(topic,payload,qos,retained) {\n\t\t\t\tvar message ;\n\n\t\t\t\tif(arguments.length === 0){\n\t\t\t\t\tthrow new Error(\"Invalid argument.\"+\"length\");\n\n\t\t\t\t}else if(arguments.length == 1) {\n\n\t\t\t\t\tif (!(topic instanceof Message) && (typeof topic !== \"string\"))\n\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+ typeof topic);\n\n\t\t\t\t\tmessage = topic;\n\t\t\t\t\tif (typeof message.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,\"Message.destinationName\"]));\n\t\t\t\t\tclient.send(message);\n\n\t\t\t\t}else {\n\t\t\t\t\t//parameter checking in Message object\n\t\t\t\t\tmessage = new Message(payload);\n\t\t\t\t\tmessage.destinationName = topic;\n\t\t\t\t\tif(arguments.length >= 3)\n\t\t\t\t\t\tmessage.qos = qos;\n\t\t\t\t\tif(arguments.length >= 4)\n\t\t\t\t\t\tmessage.retained = retained;\n\t\t\t\t\tclient.send(message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t * Normal disconnect of this Messaging client from its server.\n\t\t *\n\t\t * @name Paho.Client#disconnect\n\t\t * @function\n\t\t * @throws {InvalidState} if the client is already disconnected.\n\t\t */\n\t\t\tthis.disconnect = function () {\n\t\t\t\tclient.disconnect();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Get the contents of the trace log.\n\t\t *\n\t\t * @name Paho.Client#getTraceLog\n\t\t * @function\n\t\t * @return {Object[]} tracebuffer containing the time ordered trace records.\n\t\t */\n\t\t\tthis.getTraceLog = function () {\n\t\t\t\treturn client.getTraceLog();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Start tracing.\n\t\t *\n\t\t * @name Paho.Client#startTrace\n\t\t * @function\n\t\t */\n\t\t\tthis.startTrace = function () {\n\t\t\t\tclient.startTrace();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Stop tracing.\n\t\t *\n\t\t * @name Paho.Client#stopTrace\n\t\t * @function\n\t\t */\n\t\t\tthis.stopTrace = function () {\n\t\t\t\tclient.stopTrace();\n\t\t\t};\n\n\t\t\tthis.isConnected = function() {\n\t\t\t\treturn client.connected;\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * An application message, sent or received.\n\t * <p>\n\t * All attributes may be null, which implies the default values.\n\t *\n\t * @name Paho.Message\n\t * @constructor\n\t * @param {String|ArrayBuffer} payload The message data to be sent.\n\t * <p>\n\t * @property {string} payloadString <i>read only</i> The payload as a string if the payload consists of valid UTF-8 characters.\n\t * @property {ArrayBuffer} payloadBytes <i>read only</i> The payload as an ArrayBuffer.\n\t * <p>\n\t * @property {string} destinationName <b>mandatory</b> The name of the destination to which the message is to be sent\n\t *                    (for messages about to be sent) or the name of the destination from which the message has been received.\n\t *                    (for messages received by the onMessage function).\n\t * <p>\n\t * @property {number} qos The Quality of Service used to deliver the message.\n\t * <dl>\n\t *     <dt>0 Best effort (default).\n\t *     <dt>1 At least once.\n\t *     <dt>2 Exactly once.\n\t * </dl>\n\t * <p>\n\t * @property {Boolean} retained If true, the message is to be retained by the server and delivered\n\t *                     to both current and future subscriptions.\n\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t *                     A received message has the retained boolean set to true if the message was published\n\t *                     with the retained boolean set to true\n\t *                     and the subscrption was made after the message has been published.\n\t * <p>\n\t * @property {Boolean} duplicate <i>read only</i> If true, this message might be a duplicate of one which has already been received.\n\t *                     This is only set on messages received from the server.\n\t *\n\t */\n\t\tvar Message = function (newPayload) {\n\t\t\tvar payload;\n\t\t\tif (   typeof newPayload === \"string\" ||\n\t\tnewPayload instanceof ArrayBuffer ||\n\t\t(ArrayBuffer.isView(newPayload) && !(newPayload instanceof DataView))\n\t\t\t) {\n\t\t\t\tpayload = newPayload;\n\t\t\t} else {\n\t\t\t\tthrow (format(ERROR.INVALID_ARGUMENT, [newPayload, \"newPayload\"]));\n\t\t\t}\n\n\t\t\tvar destinationName;\n\t\t\tvar qos = 0;\n\t\t\tvar retained = false;\n\t\t\tvar duplicate = false;\n\n\t\t\tObject.defineProperties(this,{\n\t\t\t\t\"payloadString\":{\n\t\t\t\t\tenumerable : true,\n\t\t\t\t\tget : function () {\n\t\t\t\t\t\tif (typeof payload === \"string\")\n\t\t\t\t\t\t\treturn payload;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\treturn parseUTF8(payload, 0, payload.length);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"payloadBytes\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() {\n\t\t\t\t\t\tif (typeof payload === \"string\") {\n\t\t\t\t\t\t\tvar buffer = new ArrayBuffer(UTF8Length(payload));\n\t\t\t\t\t\t\tvar byteStream = new Uint8Array(buffer);\n\t\t\t\t\t\t\tstringToUTF8(payload, byteStream, 0);\n\n\t\t\t\t\t\t\treturn byteStream;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn payload;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"destinationName\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return destinationName; },\n\t\t\t\t\tset: function(newDestinationName) {\n\t\t\t\t\t\tif (typeof newDestinationName === \"string\")\n\t\t\t\t\t\t\tdestinationName = newDestinationName;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newDestinationName, \"newDestinationName\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"qos\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return qos; },\n\t\t\t\t\tset: function(newQos) {\n\t\t\t\t\t\tif (newQos === 0 || newQos === 1 || newQos === 2 )\n\t\t\t\t\t\t\tqos = newQos;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+newQos);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"retained\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return retained; },\n\t\t\t\t\tset: function(newRetained) {\n\t\t\t\t\t\tif (typeof newRetained === \"boolean\")\n\t\t\t\t\t\t\tretained = newRetained;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newRetained, \"newRetained\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"topic\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return destinationName; },\n\t\t\t\t\tset: function(newTopic) {destinationName=newTopic;}\n\t\t\t\t},\n\t\t\t\t\"duplicate\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return duplicate; },\n\t\t\t\t\tset: function(newDuplicate) {duplicate=newDuplicate;}\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t// Module contents.\n\t\treturn {\n\t\t\tClient: Client,\n\t\t\tMessage: Message\n\t\t};\n\t// eslint-disable-next-line no-nested-ternary\n\t})(typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n\treturn PahoMQTT;\n});\n","/**\n * @fileoverview Paho mqtt client wrapper\n *\n */\nimport * as Paho from \"paho-mqtt\"; //https://www.npmjs.com/package/paho-mqtt\n\nvar _this;\n\n/**\n * Mqtt client wrapper class\n */\nexport default class MqttClient {\n  /**\n   * Create an mqtt client instance\n   * @param st an object with the client setting\n   */\n  constructor(st) {\n    // handle default this.settings\n    st = st || {};\n    this.settings = {\n      uri: st.uri !== undefined ? st.uri : \"wss://spatial.andrew.cmu.edu:4443/mqtt/\",\n      host: st.host !== undefined ? st.host : \"spatial.andrew.cmu.edu\",\n      port: st.port !== undefined ? st.port : 8083,\n      path: st.path !== undefined ? st.path : \"/mqtt/\",\n      clientid:\n        st.clientid !== undefined\n          ? st.clientid\n          : \"this.mqttc-client-\" + Math.round(Math.random() * 10000),\n      subscribeTopics: st.subscribeTopics,\n      onConnectCallback: st.onConnectCallback,\n      onConnectCallbackContext: st.onConnectCallbackContext,\n      onMessageCallback: st.onMessageCallback,\n      willMessage:\n        st.willMessage !== undefined\n          ? new Paho.Message(st.willMessage)\n          : undefined,\n      dbg: st.dbg !== undefined ? st.dbg : false,\n      reconnect: st.reconnect !== undefined ? st.reconnect : true,\n      useSSL: st.useSSL !== undefined ? st.useSSL : true,\n    };\n\n    if (this.settings.willMessage !== undefined)\n      this.settings.willMessage.destinationName = st.willMessageTopic;\n\n    if (this.settings.dbg == true) console.log(this.settings);\n\n    _this = this;\n  }\n\n  async connect() {\n    if (this.settings.uri) {\n      if (this.settings.dbg == true) {\n        console.log(\"Connecting [uri]: \", this.settings.uri);\n        // init Paho client connection\n        this.mqttc = new Paho.Client(\n          this.settings.uri,\n          this.settings.clientid\n        );\n\n      }  \n    } else {\n      let wss = this.settings.useSSL == true ? \"wss://\": \"ws://\";\n      console.log(\"Connecting [host,port,path]: \" + wss + this.settings.host + \":\" + this.settings.port + this.settings.path);\n      // init Paho client connection\n      this.mqttc = new Paho.Client(\n        this.settings.host,\n        Number(this.settings.port),\n        this.settings.path,\n        this.settings.clientid\n      );\n    } \n\n    // callback handlers\n    this.mqttc.onConnectionLost = this.onConnectionLost.bind(this);\n    this.mqttc.onMessageArrived = this.onMessageArrived.bind(this);\n\n    let _this = this;\n    return new Promise(function (resolve, reject) {\n      // connect the client, if successful, call onConnect function\n      _this.mqttc.connect({\n        onSuccess: () => {\n          if (_this.settings.subscribeTopics != undefined) {\n            // Subscribe to the requested topic\n            if (_this.settings.subscribeTopics.length > 0) {\n              if (_this.settings.dbg == true)\n                console.log(\n                  \"Subscribing to: \" + _this.settings.subscribeTopics + \"\\n\"\n                );\n              _this.mqttc.subscribe(_this.settings.subscribeTopics);\n            }\n          }\n          if (_this.settings.onConnectCallback != undefined)\n            _this.settings.onConnectCallback(\n              _this.settings.onConnectCallbackContext\n            );\n          resolve();\n        },\n        onFailure: () => { throw new Error(\"Could not connect!\"); },\n        willMessage: _this.settings.willMessage,\n        reconnect: _this.settings.reconnect,\n        useSSL: _this.settings.useSSL\n      });\n    });\n  }\n\n  // message publication to self (invoke onMessageCallback directly)\n  directMesssage(topic, payload) {\n    if (typeof payload !== \"string\") payload = JSON.stringify(payload);\n    let msg = new Paho.Message(payload);\n    msg.destinationName = topic;\n    _this.settings.onMessageCallback(msg);\n  }\n\n  disconnect() {\n    try {\n      this.mqttc.disconnect();\n    } catch (err) {\n      if (this.settings.dbg == true) console.log(\"MQTT Disconnected.\");\n    }\n  }\n\n  reConnect() {\n    try {\n      this.mqttc.disconnect();\n    } catch (err) {\n      if (this.settings.dbg == true) console.log(\"MQTT Disconnected.\");\n    }\n    clientConnect();\n  }\n\n  /**\n   * Callback; Called when the client loses its connection\n   */\n  onConnectionLost(responseObject) {\n    if (this.settings.dbg == true) console.log(\"Mqtt client disconnected...\");\n\n    if (responseObject.errorCode !== 0) {\n      if (this.settings.dbg == true)\n        console.log(\"Mqtt ERROR: \" + responseObject.errorMessage + \"\\n\");\n    }\n  }\n\n  /**\n   * Callback; Called when a message arrives\n   */\n  onMessageArrived(message) {\n    if (this.settings.dbg == true)\n      console.log(\n        \"Mqtt Msg [\" +\n          message.destinationName +\n          \"]: \" +\n          message.payloadString +\n          \"\\n\"\n      );\n\n    if (this.settings.onMessageCallback != undefined)\n      this.settings.onMessageCallback(message);\n  }\n\n  publish(topic, payload) {\n    if (typeof payload !== \"string\") payload = JSON.stringify(payload);\n    if (this.settings.dbg == true)\n      console.log(\"Publishing (\" + topic + \"):\" + payload);\n    this.mqttc.send(topic, payload, 0, false);\n  }\n\n  subscribe(topic) {\n    if (this.settings.dbg == true) console.log(\"Subscribing :\" + topic);\n    this.mqttc.subscribe(topic);\n  }\n\n  unsubscribe(topic) {\n    console.log(\"Unsubscribing :\" + topic);\n    this.mqttc.unsubscribe(topic);\n  }\n}\n\nexports.MqttClient = MqttClient;","import {v4 as uuidv4} from 'uuid'; // https://www.npmjs.com/package/uuidjs\n\nexport var Action = {\n    create: \"create\",\n    delete: \"delete\"\n}\n\nexport var ObjType = {\n    rt: \"runtime\",\n    mod: \"module\"\n}\n\nexport var Type = {\n    req: \"arts_req\",\n    resp: \"arts_resp\"\n}\n\nexport var Result = {\n    ok: \"ok\",\n    err: \"error\"\n}\n\n// register/delete (according to msg_action) runtime message\nexport function rt(rt, msg_action) {\n    let msg = req(msg_action);\n\n    msg.data = {\n        type: ObjType.rt,\n        uuid: rt.uuid,\n        name: rt.name,\n        max_nmodules: rt.max_nmodules,\n        apis: rt.apis,\n    };\n    return msg;\n}\n\n// register/delete module message\nexport function mod(mod_data, msg_action) {\n    let msg = req(msg_action);\n\n    mod_data = mod_data || {};\n\n    msg.data = {\n        type: ObjType.mod,\n        uuid: mod_data.uuid !== undefined ? mod_data.uuid : uuidv4(),\n        name: mod_data.name !== undefined ? mod_data.name: mod_data.filename !== undefined ? mod_data.filename + \"@\" + navigator.product: \"mod-\" + Math.round(Math.random() * 10000) + \"@\" + navigator.product,\n        parent: mod_data.parent !== undefined ? mod_data.parent : \"{}\",\n        filename: mod_data.filename !== undefined ? mod_data.filename : \"\",\n        fileid: mod_data.fileid !== undefined ? mod_data.fileid : \"na\",\n        filetype: mod_data.filetype !== undefined ? mod_data.filetype : \"WA\",\n        env: mod_data.env !== undefined ? mod_data.env : \"\",\n        args: mod_data.args !== undefined ? mod_data.args : \"\",\n        channels: mod_data.channels !== undefined ? mod_data.channels : [],\n        wait_state: mod_data.wait_state !== undefined ? mod_data.wait_state : \"false\",\n        memory: mod_data.memory\n      };\n    \n    return msg;\n}\n\n// request message\nexport function req(msg_action) {\n    return {\n        object_id: uuidv4(), // tmp uuid, used as a transaction id\n        action: msg_action,\n        type: \"arts_req\"\n    }\n}","export var msgType = {\n    start: 0,\n    stop:1,\n    pub_msg: 2,\n    sub_msg: 3,\n    new_stream: 4,\n    signal: 5,\n    finish: 6\n}\n","/**\n * @fileoverview Thread-safe circular buffer (using SharedArrayBuffer for shared memory between workers) \n *\n * Copyright (C) Wiselab CMU.\n * @date April, 2020\n */\n\n const DFT_BUFFER_SIZE = 2048; // 2 Kb buffer \n\nexport default class SharedArrayCircularBuffer {\n  /**\n   * Create a SharedArrayBuffer instance of the needed size to store a circular buffer with byteSize bytes\n   *\n   * a circular buffer holds the following data:\n   *   uint32[0]: head index of the circular buffer\n   *   uint32[1]: tail index of the circular buffer\n   *   uint32[2]: total bytes allocated (byteSize)\n   *   uint32[3]: current number of bytes stored\n   *   uint8: spinlock flag\n   *   uint8[byteSize]: the circular buffer data\n   *\n   * @param byteSize size of the circular buffer\n   */\n  static createSharedBuffer(byteSize=DFT_BUFFER_SIZE) {\n    let buffer = new SharedArrayBuffer(\n      Uint32Array.BYTES_PER_ELEMENT * 4 + 1 + byteSize\n    );\n\n    // create views to the SharedArrayBuffer\n    let uint32 = new Uint32Array(buffer, 0, 4); // view for head, tail, byteSize and current number of bytes stored\n    let spinlock = new Uint8Array(buffer, Uint32Array.BYTES_PER_ELEMENT * 4, 1); // view to the spinlock flag\n\n    // init head, tail, allocated size and current number of bytes stored\n    uint32[0] = 0; // head (push to head)\n    uint32[1] = 0; // tail (pop from tail)\n    uint32[2] = byteSize; // total size allocated for the buffer data\n    uint32[3] = 0; // current number of bytes stored\n\n    spinlock[0] = 0;\n    return buffer;\n  }\n\n  /**\n   * Create an instance\n   * @param buffer SharedArrayBuffer instance where the circular buffer data is stored (created with createSharedBuffer())\n   * @param desc A string description of the buffer\n   */\n  constructor(buffer, desc) {\n    if (buffer == undefined)\n      throw new Error(\"Must provide a SharedArrayBuffer instance\");\n\n    // use the shared buffer for a structure that holds the circular buffer data:\n    //    uint32[0]: head index of the circular buffer\n    //    uint32[1]: tail index of the circular buffer\n    //    uint32[2]: total bytes allocated (byteSize)\n    //    uint32[3]: current number of bytes stored\n    //    uint8: spinlock flag\n    //    uint8[byteSize]: the circular buffer data\n    this.buffer = buffer; // previously created shared array buffer\n\n    let byteSize = buffer.byteLength - (Uint32Array.BYTES_PER_ELEMENT * 4 + 1);\n    //console.log(buffer);\n\n    // create views to the SharedArrayBuffer\n    this.uint32 = new Uint32Array(this.buffer, 0, 4); // view for head, tail, byteSize and current number of bytes stored\n    this.spinlock = new Uint8Array(this.buffer, Uint32Array.BYTES_PER_ELEMENT * 4, 1); // view to the spinlock flag\n    this.bytes = new Uint8Array(this.buffer, Uint32Array.BYTES_PER_ELEMENT * 4 + 1, byteSize); // view to the bytes stored\n\n    // flag to log when a push causes data to be overwritten (useful to check is buffer is too small)\n    this.logOverwrite = true;\n\n    this.desc = desc;\n  }\n\n  /**\n   * Pop bytes from tail, wrapping arround; stop when empty (tail = head)\n   * @param nbytes how many bytes to return\n   * @return an array of min(nbytes, buffer length) bytes; returns an empty array if buffer is empty (tail = head)\n   */\n  pop(nbytes) {\n    var data = [];\n\n    // acquire lock\n    while (Atomics.compareExchange(this.spinlock, 0, 0, 1) != 0);\n\n    nbytes = Math.min(nbytes, this.uint32[3]);\n    if (nbytes > 0) {\n      for (var i = 0; i < nbytes; i++) {\n        data[i] = this.bytes[(this.uint32[1] + i) % this.uint32[2]];\n      }\n      this.uint32[1] = (this.uint32[1] + i) % this.uint32[2];\n\n      this.uint32[3] -= nbytes;\n    }\n    // release lock\n    this.spinlock[0] = 0;\n\n    return data; // returns an empty array if there are no bytes to return\n  }\n\n  /**\n   * Push bytes to head, wrapping around and overwritting old vales\n   * @param bytes byte array\n   */\n  push(bytes) {\n    var i = 0;\n\n    if (this.buffer === undefined)\n      throw new Error(\"Must create a shared array instance\");\n    if (this.uint32[2] == 0)\n      throw new Error(\"Must create a shared array instance with size >0\");\n\n    // acquire lock\n    while (Atomics.compareExchange(this.spinlock, 0, 0, 1) != 0);\n\n    // push items\n    for (var i = 0; i < bytes.length; i++) {\n      let ii = (this.uint32[0] + i) % this.uint32[2];\n      this.bytes[ii] = bytes[i];\n    }\n\n    // update head\n    this.uint32[0] = (this.uint32[0] + i) % this.uint32[2];\n\n    // update tail, if needed\n    if (bytes.length > this.uint32[2] - this.uint32[3]) {\n      this.uint32[1] = this.uint32[0];\n      if (this.logOverwrite == true) console.log(\"Circular buffer overwrite:\", this.desc);\n    }\n\n    // update len\n    this.uint32[3] += bytes.length;\n    if (this.uint32[3] > this.uint32[2]) this.uint32[3] = this.uint32[2];\n\n    // release lock\n    this.spinlock[0] = 0;\n\n    return this.uint32[3];\n  }\n\n  /**\n   * Return number of bytes currently in the buffer\n   */\n  length() {\n    return this.uint32[3];\n  }\n\n  /**\n   * Return total bytes allocated for the buffer\n   */\n  size() {\n    return this.uint32[2];\n  }\n\n  /**\n   * Turn on/off the logging of when old values are overwritten\n   * @param value true/false\n   */\n  setOverwriteLog(value) {\n    this.logOverwrite = value;\n  }\n\n}\n","\n// signals we support\nexport var SIGNO = {\n    QUIT: 3,\n    KILL: 4\n}\n","/**\n * @fileoverview Register the browser runtime and launch WASM modules in a separate worker\n *\n * Copyright (C) Wiselab CMU.\n * @date April, 2020\n */\nimport { v4 as uuidv4 } from \"uuid\"; // https://www.npmjs.com/package/uuidjs\nimport * as QueryString from \"query-string\";\n\nimport MqttClient from \"/mqtt-client.js\";\nimport * as ARTSMessages from \"/arts-msgs.js\";\nimport * as WorkerMessages from \"/worker-msgs.js\";\nimport SharedArrayCircularBuffer from \"/sa-cbuffer.js\";\nimport { SIGNO } from \"/signal.js\";\n\nvar runtime;\nvar mc;\nvar ioworker;\n\nconst dft_realm = \"realm\";\nconst dft_reg_topic = \"proc/reg\";\nconst dft_ctl_topic = \"proc/control\";\nconst dft_dbg_topic = \"proc/debug\";\nconst dft_apis = [\"wasi:unstable\"];\nconst dft_store_location = \"/store/users/\";\n\nexport async function init(settings) {\n  // handle default settings\n  settings = settings || {};\n\n  let rrealm = settings.realm !== undefined ? settings.realm : dft_realm;\n  let ruuid = settings.uuid !== undefined ? settings.uuid : uuidv4();\n  runtime = {\n    realm: rrealm,\n    uuid: ruuid,\n    name:\n      settings.name !== undefined > 1\n        ? settings.name\n        : \"rt-\" + Math.round(Math.random() * 10000) + \"@\" + navigator.product,\n    max_nmodules:\n      settings.max_nmodules !== undefined ? settings.max_nmodules : 1,\n    apis: settings.apis !== undefined ? settings.apis : dft_apis,\n    reg_topic:\n      settings.reg_topic !== undefined\n        ? settings.reg_topic\n        : rrealm + \"/\" + dft_reg_topic,\n    ctl_topic:\n      settings.ctl_topic !== undefined\n        ? settings.ctl_topic\n        : rrealm + \"/\" + dft_ctl_topic + \"/\" + ruuid + \"/#\",\n    dbg_topic:\n      settings.dbg_topic !== undefined\n        ? settings.dbg_topic\n        : rrealm + \"/\" + dft_dbg_topic,\n    arts_ctl_topic:\n      settings.arts_ctl_topic !== undefined\n        ? settings.arts_ctl_topic\n        : rrealm + \"/\" + dft_ctl_topic, // arts messages sent here\n    reg_timeout_seconds:\n      settings.reg_timeout_seconds !== undefined\n        ? settings.reg_timeout_seconds\n        : 30,\n    mqtt_uri: settings.mqtt_uri,\n    onInitCallback: settings.onInitCallback,\n    modules: [],\n    client_modules: [],\n    filestore_location:\n      settings.filestore_location != undefined\n        ? settings.filestore_location\n        : dft_store_location,\n    dbg: settings.dbg !== undefined ? settings.dbg : false,\n  };\n\n  console.log(runtime);\n  runtime.isRegistered = false;\n\n  // create last will message\n  let lastWill = JSON.stringify(\n    ARTSMessages.rt(runtime, ARTSMessages.Action.delete)\n  );\n\n  // on unload, send delete client modules requests\n  window.onbeforeunload = function() {\n    runtime.client_modules.forEach(mod => {\n      let modDelMsg = ARTSMessages.mod(mod, ARTSMessages.Action.delete);      \n      mc.publish(runtime.arts_ctl_topic, modDelMsg);\n    });\n  };\n\n  // start mqtt client\n  mc = new MqttClient({\n    uri: runtime.mqtt_uri,\n    clientid: runtime.uuid, // mqtt client id is the runtime uuid\n    willMessageTopic: runtime.reg_topic,\n    willMessage: lastWill,\n    subscribeTopics: [runtime.reg_topic], // subscribe to reg topic\n    onMessageCallback: onMqttMessage,\n    dbg: runtime.dbg,\n  });\n\n  // connect\n  try {\n    await mc.connect();\n  } catch (error) {\n    console.log(error); // Failure!\n    return;\n  }\n  // subscribe to **all** debug messages; for debug/viz purposes only\n  //mc.subscribe(runtime.dbg_topic + \"/#\");\n\n  // register runtime in ARTS\n  registerRuntime();\n\n  // create the module io worker\n  ioworker = new Worker(\"moduleio-worker.js\");\n}\n\n// get runtime settings\nexport function info() {\n  return runtime;\n}\n\n// send a signal to local module\nexport function signal(modUuid, signo) {\n  ioworker.postMessage({\n    type: WorkerMessages.msgType.signal,\n    mod_uuid: modUuid,\n    signo: signo,\n  });\n}\n\n// create module from persist object\n// will create a module in this runtime or send request message to ARTS\nexport function createModule(persist_mod) {\n  let pdata = persist_mod.data;\n\n  // function to replace variables\n  function replaceVars(text, rvars) {\n    let result;\n    for (const [key, value] of Object.entries(rvars)) {\n      if (value !== undefined) {\n        let re = new RegExp(\"\\\\$\\\\{\" + key + \"\\\\}\", \"g\");\n        result = text.replace(re, value);\n        text = result;\n      }\n    }\n    return result;\n  }\n\n\n  // get mqtt host from globals\n  let mqtthost = window.globals ? window.globals.mqttParamZ : undefined;\n  if (mqtthost) { \n    // remove port, scheme and path it exist\n    let n = mqtthost.lastIndexOf(\":\");\n    if (mqtthost.lastIndexOf(\":\") > -1) { \n      mqtthost = mqtthost.substring(0, n);    \n    }\n    mqtthost.replace(\"wss://\", \"\");\n    mqtthost.replace(\"ws://\", \"\");\n    mqtthost.replace(\"/mqtt/\", \"\");\n    mqtthost.replace(\"/mqtt\", \"\");\n  }\n\n  // get query string\n  let qstring = QueryString.parse(location.search);\n\n  // variables we replace \n  let rvars = {\n    scene: window.globals ? window.globals.renderParam : qstring[\"scene\"],\n    mqtth: mqtthost,\n    cameraid: window.globals ? window.globals.camName : undefined,\n    username: window.globals ? window.globals.userParam : qstring[\"name\"],\n    runtimeid: runtime.uuid,\n    ...qstring, // add all url params\n  };\n\n  // convert args and env to strings and replace variables\n  let args, env;\n  if (pdata.args) args = replaceVars(pdata.args.join(\" \"), rvars);\n  if (pdata.env) env = replaceVars(pdata.env.join(\" \"), rvars);\n\n  // replace variables in channel path and params\n  if (pdata.channels) {\n    for (let i = 0; i < pdata.channels.length; i++) {\n      pdata.channels[i].path = replaceVars(pdata.channels[i].path, rvars);\n      pdata.channels[i].params.topic = replaceVars(pdata.channels[i].params.topic, rvars);\n    }\n  }\n\n  let muuid = undefined;\n  // check instantiate (single/per 'client')\n  if (pdata.instantiate == \"single\") {\n    // object_id in persist obj is used as the uuid, if it is a valid uuid\n    let uuid_regex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    if (uuid_regex.test(persist_mod.object_id)) muuid = persist_mod.object_id;\n    else {\n      console.log(\n        \"Error! Object id must be a valid uuid (for instantiate=single)!\"\n      );\n    }\n  } // for per client, let ARTSMessages.mod() create a random uuid;\n\n  let fn;\n  if (pdata.filetype == 'WA') {\n    // full filename using file store location, name (in the form namespace/program-folder), entry filename\n    fn = [runtime.filestore_location, pdata.name, pdata.filename]\n      .join(\"/\")\n      .replace(/([^:])(\\/\\/+)/g, \"$1/\");\n  } else fn = pdata.filename; // just the filename\n\n  // create new ARTS message using persist obj data\n  let modCreateMsg = ARTSMessages.mod(\n    {\n      name: pdata.name,\n      uuid: muuid,\n      parent: pdata.affinity == \"client\" ? { uuid: runtime.uuid } : undefined, // parent is this runtime if affinity is client; otherwise, undefined to let ARTS decide\n      filename: fn,\n      filetype: pdata.filetype,\n      channels: pdata.channels,\n      env: env,\n      args: args,\n    },\n    ARTSMessages.Action.create\n  );\n\n  // check affinity\n  if (pdata.affinity == \"single\") {\n    // object_id in persist obj is used as the uuid, if it is a valid uuid\n    let regex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    if (regex.test(persist_mod.object_id))\n      modCreateMsg.data.uuid = persist_mod.object_id;\n    else console.log(\"Error! Object id must be a valid uuid!\");\n  } // nothing to do for multiple; a random uuid is created in ARTSMessages.mod(undefined, ARTSMessages.Action.create);\n\n  // if instanciate 'per client', save this module uuid to delete before exit\n  if (pdata.instantiate == \"client\") {\n    console.log(\"Saving:\", modCreateMsg.data);\n    runtime.client_modules.push(modCreateMsg.data);\n\n  }\n\n  // TODO: save pending req uuid and check arts responses\n  // NOTE: object_id of arts messages are used as a transaction id\n  // runtime.pending_req.push(modCreateMsg.object_id); // pending_req is a list with object_id of requests waiting arts response\n\n  console.log(modCreateMsg);\n  mc.publish(runtime.arts_ctl_topic, modCreateMsg);\n}\n\n// register runtime\nfunction registerRuntime() {\n  if (runtime.isRegistered == true) return;\n\n  var reg_msg = ARTSMessages.rt(runtime, ARTSMessages.Action.create);\n  runtime.reg_uuid = reg_msg.object_id; // save message uuid for confirmation\n\n  mc.publish(runtime.reg_topic, JSON.stringify(reg_msg));\n\n  setTimeout(registerRuntime, runtime.reg_timeout_seconds * 1000); // try register again\n}\n\n// callback from mqttclient; on reception of message\nfunction onMqttMessage(message) {\n  // output module stdout; for debug/viz purposes (in init we subscribed to runtime.dbg_topic/#)\n  if (message.destinationName.startsWith(runtime.dbg_topic + \"/stdout/\")) {\n    console.log(\"[\" + message.destinationName + \"] \" + message.payloadString);\n    return;\n  }\n\n  try {\n    var msg = JSON.parse(message.payloadString);\n  } catch (err) {\n    console.log(\n      \"Could not parse message: [\" + message.destinationName + \"==\" + +\"]\",\n      message.payloadString,\n      err\n    );\n    return;\n  }\n\n  handleARTSMsg(msg);\n}\n\n// handle arts messages\nfunction handleARTSMsg(msg) {\n  // response from ARTS\n  if (msg.type === ARTSMessages.Type.resp) {\n    // response to reg request\n    if (msg.object_id == runtime.reg_uuid) {\n      // check if result was ok\n      if (msg.data.result != ARTSMessages.Result.ok) {\n        console.log(\"Error registering runtime:\" + msg.data);\n        return;\n      }\n\n      runtime.isRegistered = true;\n\n      // unsubscribe from reg topic and subscribe to ctl/runtime_uuid\n      mc.unsubscribe(runtime.reg_topic);\n      mc.subscribe(runtime.ctl_topic);\n\n      // runtime registered; signal init is done and ready to roll\n      if (runtime.onInitCallback != undefined) runtime.onInitCallback();\n\n      return;\n    }\n  }\n\n  // below, only handle module requests\n  if (msg.type != ARTSMessages.Type.req || msg.data.type != ARTSMessages.ObjType.mod) {\n    console.log(\"Runtime mngr: ignoring non module request msg.\")\n    return;\n  }\n\n  // module create request\n  if (msg.action === ARTSMessages.Action.create) {\n    let mod = runtime.modules[msg.data.uuid];\n\n    // if this is a module we have not heard about, we need to do some additional stuff\n    if (mod === undefined) {\n      mod = msg.data;\n\n      // also return if filetype is not WASM\n      if (mod.filetype !== 'WA') {\n        console.log(\"Received module request for filetype not supported.\")\n        return;\n      }\n\n      // save module data\n      runtime.modules[mod.uuid] = mod;\n\n      // add topics where the module\n      mod.reg_topic = runtime.reg_topic; // runtime's reg topic; used to send module delete msg\n      mod.stdin_topic = runtime.dbg_topic + \"/stdin/\" + mod.uuid; // under runtime's dbg topic\n      mod.stdout_topic = runtime.dbg_topic + \"/stdout/\" + mod.uuid; // under runtime's dbg topic\n\n      // create a shared buffer to be used by both workers as a circular buffer\n      mod.sb = SharedArrayCircularBuffer.createSharedBuffer();\n\n      // create a (js worker) channel for the workers to talk\n      mod.channel = new MessageChannel();\n\n      // start an mqtt client for the module io (in moduleio worker); tranfer ownership of the port\n      ioworker.postMessage(\n        {\n          type: WorkerMessages.msgType.start,\n          arts_mod_instance_data: {\n            uuid: mod.uuid,\n            reg_topic: mod.reg_topic,\n            stdin_topic: mod.stdin_topic,\n          }, // module object with only needed data\n          worker_port: mod.channel.port2,\n          shared_array_buffer: mod.sb,\n        },\n        [mod.channel.port2]\n      );\n    }\n\n    // wait_state indicated? we will wait for another create message with the state to start the module then\n    if (msg.data.wait_state == true) return;\n\n    // start a worker to run the wasm module\n    let mworker = new Worker(\"module-worker.js\");\n\n    console.log(msg);\n    if (msg.migratetx_start)\n      console.log(\n        \"|T: Migration - State Publish to Module Startup:\",\n        Date.now() - msg.migratetx_start,\n        \"ms\"\n      ); // TMP: assumes module is migrating in the same machine/in synched machines\n\n    // post start message to worker\n    mworker.postMessage(\n      {\n        type: WorkerMessages.msgType.start,\n        arts_mod_instance_data: {\n          uuid: mod.uuid,\n          filename: mod.filename,\n          stdin_topic: mod.stdin_topic,\n          stdout_topic: mod.stdout_topic,\n          env: mod.env,\n          args: mod.args,\n          channels: mod.channels,\n        }, // module object with only needed data\n        worker_port: mod.channel.port1,\n        shared_array_buffer: mod.sb,\n        wait_state: msg.data.wait_state,\n        memory: msg.data.memory,\n      },\n      [mod.channel.port1]\n    );\n\n    // set event handler to receive messages from the worker; (when the module finishes)\n    mworker.addEventListener(\"message\", onWorkerMessage);\n\n    // save worker\n    runtime.modules[mod.uuid].mworker = mworker;\n\n    // subscribe to debug messages from the module; for debug/viz purposes only\n    mc.subscribe(runtime.dbg_topic + \"/stdout/\" + mod.uuid);\n\n    return;\n  }\n\n  // module delete request\n  if (msg.action === ARTSMessages.Action.delete) {\n    // save send_to_runtime\n    runtime.modules[msg.data.uuid].send_to_runtime = msg.send_to_runtime;\n\n    runtime.modules[msg.data.uuid].del_start = Date.now(); // TMP\n\n    console.log(\"Posting kill to module uuid\", msg.data.uuid);\n    // send signal to module through moduleio; worker will send message back when done (handled by onWorkerMessage)\n    ioworker.postMessage({\n      type: WorkerMessages.msgType.signal,\n      mod_uuid: msg.data.uuid,\n      signo: SIGNO.QUIT,\n    });\n  }\n}\n\n// on reception of message from module worker\nfunction onWorkerMessage(e) {\n  console.log(\"Module done:\", e.data);\n\n  // expect a module finish message\n  if (e.data.type != WorkerMessages.msgType.finish) return;\n\n  let mod = runtime.modules[e.data.mod_uuid];\n\n  if (mod === undefined) {\n    console.log(\"Could not find module.\");\n    return;\n  }\n\n  mc.unsubscribe(runtime.dbg_topic + \"/stdout/\" + mod.uuid);\n\n  // terminate the worker\n  mod.mworker.terminate();\n\n  // clear module data\n  delete runtime.modules[e.data.mod_uuid];\n\n  if (mod.send_to_runtime === undefined) return;\n\n  // module create msg\n  let modCreateMsg = ARTSMessages.mod(mod, ARTSMessages.Action.create);\n  modCreateMsg.data.memory = e.data.memory;\n\n  modCreateMsg.migratetx_start = Date.now(); // TMP\n\n  console.log(\n    \"|T: Module Terminate/Serialize/Post State:\",\n    Date.now() - mod.del_start,\n    \"ms\"\n  ); // TMP\n\n  // send module create msg\n  if (mod.send_to_runtime !== runtime.uuid) {\n    console.time(\"|T: Publish (part of State Publish)\");\n    mc.publish(\n      dft_ctl_topic + \"/\" + mod.send_to_runtime,\n      JSON.stringify(modCreateMsg)\n    );\n    console.timeEnd(\"|T: Publish (part of State Publish)\");\n  } else {\n    // move to self ? allow for now... (useful for testing)\n    handleARTSMsg(modCreateMsg);\n  }\n}\n","import * as RuntimeMngr from '/runtime-mngr.js'\nimport { SIGNO } from '/signal.js'\nimport * as ARTSMessages from \"/arts-msgs.js\";\n\n// make RuntimeMngr available \nwindow.WASMRuntimeManager = RuntimeMngr;\n\n/* start runtime after page and other scripts are loaded; */\nwindow.addEventListener('onauth', (event) => {\n  let mqtt_uri;\n  let name;\n\n  if (globals) {\n    let mqttParamZ;\n    if (defaults) mqttParamZ=defaults.mqttParamZ;\n    // use globals.mqttParam/defaults.mqttParamZ for mqtt server, if exists; fallback to mqqt server uri from browser location\n    mqtt_uri = globals.mqttParam !== undefined ? globals.mqttParam : mqttParamZ !== undefined ? \"wss://\" + defaults.mqttParamZ + \"/mqtt/\" : \"wss://\" + location.hostname + (location.port ? ':'+location.port : '') + \"/mqtt/\";\n    // use globals.userParam for runtime name, if exists; otherwise let the runtime manager assign one\n    name = globals.userParam !== undefined ? \"rt-\"+Math.round(Math.random() * 10000)+\"-\"+globals.userParam : undefined;\n  }\n\n  RuntimeMngr.init({ \n    mqtt_uri: mqtt_uri, \n    onInitCallback: runtimeInitDone, \n    name: name,\n    dbg: true\n  });\n});\n\nfunction runtimeInitDone() {\n  console.log(\"Runtime init done.\");\n\n  // check if we have modules to start\n  if (pendingModules.length > 0) {\n    pendingModules.forEach(function(persistm) {\n      console.log(\"Starting:\", persistm.data.name);\n      RuntimeMngr.createModule(persistm);\n    });\n  }\n  // empty pending modules\n  pendingModules = [];\n}\n\n"]}